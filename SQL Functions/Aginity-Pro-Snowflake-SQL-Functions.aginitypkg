{
  "entities": [
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Compression/Decompression/DECOMPRESS_STRING",
      "id": "001799e1-d2d6-4f6d-b728-f4cfa23dedfd",
      "parent_folder_id": "27206650-0fde-4914-a802-4ba1b393bda7",
      "name": "DECOMPRESS_STRING",
      "entity_type": "SQL_ENTITY",
      "description": "Decompresses the compressed BINARY input parameter to a string.",
      "content": "DECOMPRESS_STRING(<input>, <method>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/EQUAL_NULL",
      "id": "0044db1c-12d9-4304-8ae5-c90490eb0251",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "EQUAL_NULL",
      "entity_type": "SQL_ENTITY",
      "description": "Compares whether two expressions are equal. The function is NULL-safe, meaning it treats NULLs as known values for comparing equality. Note that this is different from the EQUAL comparison operator (=), which treats NULLs as unknown values.",
      "content": "EQUAL_NULL( <expr1> , <expr2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Data Generation Functions/Random/UUID_STRING",
      "id": "0094e618-0a94-4cb3-9768-18887ec2e801",
      "parent_folder_id": "d5803490-021e-4e48-8955-3c3e770ea146",
      "name": "UUID_STRING",
      "entity_type": "SQL_ENTITY",
      "description": "Generates either a version 4 (random) or version 5 (named) RFC 4122-compliant UUID as a formatted string.",
      "content": "UUID_STRING()\r\n\r\nUUID_STRING( <uuid> , <name> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$STREAM_HAS_DATA",
      "id": "01ad7576-564f-449f-9685-efdf7f0f4e41",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$STREAM_HAS_DATA",
      "entity_type": "SQL_ENTITY",
      "description": "Indicates whether a specified stream contains change data capture (CDC) records.",
      "content": "SYSTEM$STREAM_HAS_DATA('<stream_name>')",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation",
      "id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "parent_folder_id": "fcfe29fe-a075-43ce-a750-5f0158cf6e1d",
      "name": "General Aggregation",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$DATABASE_REFRESH_HISTORY",
      "id": "030be70c-88ba-4e8d-a45d-c06252161689",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$DATABASE_REFRESH_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a JSON object showing the refresh history for a secondary database.",
      "content": "SYSTEM$DATABASE_REFRESH_HISTORY( '<secondary_db_name>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/[ NOT ] BETWEEN",
      "id": "04140b6b-8a6e-420b-8b3e-5e55104ff9f5",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "[ NOT ] BETWEEN",
      "entity_type": "SQL_ENTITY",
      "description": "Returns TRUE when the input expression (numeric or string) is within the specified lower and upper boundary.",
      "content": "<expr> [ NOT ] BETWEEN <lower_bound> AND <upper_bound>",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Logarithmic/LOG",
      "id": "0487e393-98fb-4cb3-93ea-b6ba8c0a9656",
      "parent_folder_id": "56eda230-7ff2-4e49-8e70-8db1f14f2e6a",
      "name": "LOG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the logarithm of a numeric expression.",
      "content": "LOG(<base>, <expr>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/AVG",
      "id": "04b0e41a-40e6-479e-b1a8-ccbf80e95530",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "AVG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the average of non-NULL records. If all records inside a group are NULL, the function returns NULL.",
      "content": "AVG( [ DISTINCT ] <expr1> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake",
      "id": "050a89ce-6a35-4719-a191-c798858eb64e",
      "parent_folder_id": "067ce53b-d1d2-431a-9f3d-4765eb18eebf",
      "name": "Snowflake",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/GET_DDL",
      "id": "05c0ea30-ee7b-48ec-9adf-b9626d052000",
      "parent_folder_id": "eb0a11a4-3341-43fe-af67-874f77b81187",
      "name": "GET_DDL",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a DDL statement that can be used to recreate the specified object. For databases and schemas, GET_DDL is recursive, i.e. it returns the DDL statements for recreating all supported objects within the specified database/schema.",
      "content": "GET_DDL( '<object_type>' , '[<namespace>.]<object_name>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$CURRENT_USER_TASK_NAME",
      "id": "060c8985-acbe-4a85-be58-33c12463acfa",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$CURRENT_USER_TASK_NAME",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the name of the task currently executing when invoked from the statement or stored procedure defined by the task.",
      "content": "SYSTEM$CURRENT_USER_TASK_NAME()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/LIKE ALL",
      "id": "0644cb79-53fb-4f17-8e36-adb4d514573a",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "LIKE ALL",
      "entity_type": "SQL_ENTITY",
      "description": "Allows case-sensitive matching of strings based on comparison with one or more patterns.  The operation is similar to LIKE. If and only if the input string matches all of the patterns, this returns the input string.",
      "content": "<subject> LIKE ALL (<pattern1> [, <pattern2> ... ] ) [ ESCAPE <escape_char> ]",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/AS_<object_type>/AS_OBJECT",
      "id": "0655dfe6-ae53-42e8-876c-a8f6654730b8",
      "parent_folder_id": "48876c3a-68ff-4922-afd0-99dfaa4624cd",
      "name": "AS_OBJECT",
      "entity_type": "SQL_ENTITY",
      "description": "Casts a VARIANT value to an object.",
      "content": "AS_OBJECT( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries",
      "id": "067ce53b-d1d2-431a-9f3d-4765eb18eebf",
      "parent_folder_id": "bb6de4af-1aad-493e-a9ee-b3e75cf58ed7",
      "name": "Community Queries",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/IS [ NOT ] NULL",
      "id": "06fccb54-b548-4932-8b69-381483568beb",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "IS [ NOT ] NULL",
      "entity_type": "SQL_ENTITY",
      "description": "Determines whether an expression is NULL or is not NULL.",
      "content": "<expr> IS [ NOT ] NULL",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/VARIANCE , VARIANCE_SAMP",
      "id": "07451098-9450-4cfb-87f2-fb2e729ea2c2",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "VARIANCE , VARIANCE_SAMP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sample variance of non-NULL records in a group. If all records inside a group are NULL, a NULL is returned.",
      "content": "VARIANCE( <expr1> ) OVER (\r\n                         [ PARTITION BY <expr2> ]\r\n                         [ ORDER BY <expr3> [ ASC | DESC ] [ <window_frame> ] ]\r\n                         )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAY_COMPACT",
      "id": "07844aa9-a2bc-4dfc-8bf3-1fa4fa0e3ad5",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAY_COMPACT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a compacted array with missing and null values removed, effectively converting sparse arrays into dense arrays.",
      "content": "ARRAY_COMPACT( <array1> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Date and Time Data Types/TO_TIMESTAMP , TO_TIMESTAMP_*",
      "id": "08e58b22-7ff6-444b-9a3f-8fc866fedd89",
      "parent_folder_id": "6e41e97a-a871-4e06-a5d6-8043e830a4ae",
      "name": "TO_TIMESTAMP , TO_TIMESTAMP_*",
      "entity_type": "SQL_ENTITY",
      "description": "Converts an input expression into the corresponding timestamp:  TO_TIMESTAMP_LTZ (timestamp with local time zone)  TO_TIMESTAMP_NTZ (timestamp with no time zone)  TO_TIMESTAMP_TZ (timestamp with time zone)",
      "content": "timestampFunction ( <string_expr> [ , <format> ] )\r\n\r\ntimestampFunction ( <numeric_expr> [ , <scale> ] )\r\n\r\ntimestampFunction ( <date_expr> )\r\n\r\ntimestampFunction ( <timestamp_expr> )\r\n\r\ntimestampFunction ( <variant_expr> )\r\n\r\nWhere:\r\n\r\ntimestampFunction ::=\r\n    TO_TIMESTAMP | TO_TIMESTAMP_LTZ | TO_TIMESTAMP_NTZ | TO_TIMESTAMP_TZ",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Context/LAST_QUERY_ID",
      "id": "095b36b3-f27f-4028-85f0-1f0e605a41da",
      "parent_folder_id": "825f6234-6811-4d6d-b615-78179c86c6fb",
      "name": "LAST_QUERY_ID",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the ID of a specified query in the current session. If no query is specified, the most recently-executed query is returned.",
      "content": "LAST_QUERY_ID( [ <num> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/TANH",
      "id": "099bb2d4-ee47-42a4-a25f-ce54c26eacb6",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "TANH",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the hyperbolic tangent of its argument.",
      "content": "TANH( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Boolean Aggregation/BOOLXOR_AGG",
      "id": "0a396f5c-2bbf-4db3-967f-2a6eaa356239",
      "parent_folder_id": "cba52012-ef90-460a-a1e6-707a473a0b0e",
      "name": "BOOLXOR_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the logical (boolean) XOR value of all non-NULL boolean records in a group.  BOOLXOR_AGG returns TRUE if and only if exactly one record in the group evaluates to TRUE. This differs from a cumulative XOR on the records.  If all records inside the group are NULL, or if the group is empty, the function returns ",
      "content": "BOOLXOR_AGG( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/HAVERSINE",
      "id": "0ae1c48c-1c78-41a2-a5ef-0c09b8eeab08",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "HAVERSINE",
      "entity_type": "SQL_ENTITY",
      "description": "Calculates the great circle distance in kilometers between two points on the Earth’s surface, using the Haversine formula. The two points are specified by their latitude and longitude in degrees.",
      "content": "HAVERSINE( lat1, lon1, lat2, lon2 )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Bitwise Aggregation/BITOR_AGG",
      "id": "0b12f7bc-5b55-45d7-897d-85e563d989a9",
      "parent_folder_id": "3f9c9987-4b5c-423c-9ef8-db538d930d08",
      "name": "BITOR_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the bitwise OR value of all non-NULL numeric records in a group.  For each bit position, if at least one row has the bit set to 1, then the bit is set to 1 in the result. If all rows have that bit set to zero, the result is zero.  If all records inside the group are NULL, or if the group is empty, the function returns NULL.",
      "content": "BITOR_AGG( <expr1> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/WAREHOUSE_METERING_HISTORY",
      "id": "0bb744f4-b314-4fca-b503-4f102b14e48f",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "WAREHOUSE_METERING_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "This table function can be used in queries to return the hourly credit usage for a single warehouse (or all the warehouses in your account) within a specified date range.",
      "content": "WAREHOUSE_METERING_HISTORY(\r\n      DATE_RANGE_START => <constant_expr>\r\n      [ , DATE_RANGE_END => <constant_expr> ]\r\n      [ , WAREHOUSE_NAME => '<string>' ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Linear Regression/REGR_SYY",
      "id": "0bef44bb-fea7-419a-bb3b-d99b258622e7",
      "parent_folder_id": "a66240bf-3b81-4d25-9731-45531832b657",
      "name": "REGR_SYY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns REGR_COUNT(y, x) * VAR_POP(y) for non-null pairs.",
      "content": "REGR_SYY(y, x)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/ILIKE ANY",
      "id": "0c3cd3a2-0da7-4614-b28e-56db8839ee3f",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "ILIKE ANY",
      "entity_type": "SQL_ENTITY",
      "description": "Allows case-insensitive matching of strings based on comparison with one or more patterns.  The operation is similar to LIKE. If the input string matches any of the patterns, this returns the input string.",
      "content": "<subject> ILIKE ANY (<pattern1> [, <pattern2> ... ] ) [ ESCAPE <escape_char> ]",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Boolean Aggregation/BOOLAND_AGG",
      "id": "0d31881d-bb51-400e-976a-8bf44106aee5",
      "parent_folder_id": "3db94cb8-8831-41b6-84f5-2242a3f45266",
      "name": "BOOLAND_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the logical (boolean) AND value of all non-NULL boolean records in a group.  BOOLAND_AGG returns TRUE if and only if all records in the group evaluate to TRUE.  If all records inside the group are NULL, or if the group is empty, the function returns NULL.",
      "content": "BOOLAND_AGG( <expr> )  OVER ( [ PARTITION BY <partition_expr> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Boolean Data Type",
      "id": "0d930673-6f8b-4b99-91fe-53621a885983",
      "parent_folder_id": "f7d813f4-6491-48b4-a1a8-105b410e1a51",
      "name": "Boolean Data Type",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Numeric Data Types",
      "id": "0e00f3e3-a020-4c4e-9469-2714d7556382",
      "parent_folder_id": "f7d813f4-6491-48b4-a1a8-105b410e1a51",
      "name": "Numeric Data Types",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Extraction/FLATTEN",
      "id": "0e121525-acd7-42ff-a796-04fcdd258144",
      "parent_folder_id": "f3987910-66c2-49ad-a80f-63146c591214",
      "name": "FLATTEN",
      "entity_type": "SQL_ENTITY",
      "description": "Flattens (explodes) compound values into multiple rows.  FLATTEN is a table function that takes a VARIANT, OBJECT, or ARRAY column and produces a lateral view (i.e. an inline view that contains correlation referring to other tables that precede it in the FROM clause).  FLATTEN can be used to convert semi-structured data to a relational representation.",
      "content": "FLATTEN( INPUT => <expr> [ , PATH => <constant_expr> ]\r\n                         [ , OUTER => TRUE | FALSE ]\r\n                         [ , RECURSIVE => TRUE | FALSE ]\r\n                         [ , MODE => 'OBJECT' | 'ARRAY' | 'BOTH' ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$PIPE_STATUS",
      "id": "0e1a4e8a-7b27-42e3-a2df-fcc498eac30a",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$PIPE_STATUS",
      "entity_type": "SQL_ENTITY",
      "description": "Retrieves a JSON representation of the current status of a pipe.",
      "content": "SYSTEM$PIPE_STATUS( '<pipe_name>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Boolean Aggregation/BOOLOR_AGG",
      "id": "0e473fbf-4575-4b60-aad5-0c5b2784371d",
      "parent_folder_id": "cba52012-ef90-460a-a1e6-707a473a0b0e",
      "name": "BOOLOR_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the logical (boolean) OR value of all non-NULL boolean records in a group.  BOOLOR_AGG returns ‘true’ if at least one record in the group evaluates to ‘true’.  If all records inside the group are NULL, or if the group is empty, the function returns NULL.",
      "content": "BOOLOR_AGG( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$SHOW_OAUTH_CLIENT_SECRETS",
      "id": "0eb926b7-b468-4e25-831e-21252f95ae65",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$SHOW_OAUTH_CLIENT_SECRETS",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the client secrets in a string. The client ID and a client secret must be included in the authorization header to the OAuth token endpoint.",
      "content": "SYSTEM$SHOW_OAUTH_CLIENT_SECRETS( '<integration_name>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions",
      "id": "109ad4a7-dca5-4905-a4f3-8a76946c90ed",
      "parent_folder_id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "name": "System Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/ENDSWITH",
      "id": "1259ab9c-30c5-46f1-b798-0ad0727dbc41",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "ENDSWITH",
      "entity_type": "SQL_ENTITY",
      "description": "Returns TRUE if the first expression ends with second expression. Both expressions must be text or binary expressions.",
      "content": "ENDSWITH( <expr1> , <expr2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/EDITDISTANCE",
      "id": "1528b213-cfb9-4241-bb64-cd32b719e6e1",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "EDITDISTANCE",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the Levenshtein distance between two input strings. It is the number of single-character insertions, deletions or substitutions needed to convert one string to another.",
      "content": "EDITDISTANCE( <expr1> , <expr2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Rank-related/WIDTH_BUCKET",
      "id": "1607def3-1712-49a9-8dea-9387416b7d6a",
      "parent_folder_id": "65dd50ca-a8ef-4ec2-85b0-fd1202f8109a",
      "name": "WIDTH_BUCKET",
      "entity_type": "SQL_ENTITY",
      "description": "Constructs equi-width histograms, in which the histogram range is divided into intervals of identical size, and returns the bucket number into which the value of an expression falls, after it has been evaluated. The function returns an integer value or null (if any input is null).",
      "content": "WIDTH_BUCKET( <expr> , <min_value> , <max_value> , <num_buckets> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Data Generation Functions/Controlled Distribution/UNIFORM",
      "id": "163f9b03-4e82-4a16-9599-6c616178aeec",
      "parent_folder_id": "35160c38-8f4a-414d-b9cb-42dc9323a0bb",
      "name": "UNIFORM",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a uniformly random number, in the inclusive range [min, max].",
      "content": "UNIFORM( <min> , <max> , <gen> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions",
      "id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "parent_folder_id": "050a89ce-6a35-4719-a191-c798858eb64e",
      "name": "SQL Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Context/CURRENT_STATEMENT",
      "id": "16ac6bf4-3ad3-46af-b42e-caf1045e349c",
      "parent_folder_id": "825f6234-6811-4d6d-b615-78179c86c6fb",
      "name": "CURRENT_STATEMENT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the SQL text of the statement that is currently executing.",
      "content": "CURRENT_STATEMENT()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/TASK_DEPENDENTS",
      "id": "16baccdd-c285-4c9e-8420-ae8d1505e788",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "TASK_DEPENDENTS",
      "entity_type": "SQL_ENTITY",
      "description": "This table function returns the list of child tasks for a given root (i.e. parent) task in a simple tree of tasks.",
      "content": "TASK_DEPENDENTS(\r\n      TASK_NAME => '<string>'\r\n      [, RECURSIVE => <Boolean> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Rounding and Truncation/ROUND",
      "id": "16d9f9ed-cc13-47f4-bec5-479440ce219f",
      "parent_folder_id": "c92cfc54-280e-4dc8-82f8-6599224e4332",
      "name": "ROUND",
      "entity_type": "SQL_ENTITY",
      "description": "Returns rounded values for input_expr.",
      "content": "ROUND( <input_expr> [, <scale_expr> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Semi-structured Data Aggregation",
      "id": "17728ca8-58ed-4cfc-b7c0-5428a823263c",
      "parent_folder_id": "abf8186d-0346-4582-a27f-871904d4bee2",
      "name": "Semi-structured Data Aggregation",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Linear Regression/REGR_INTERCEPT",
      "id": "179faeac-0234-4c6d-a118-549d066acc5a",
      "parent_folder_id": "a66240bf-3b81-4d25-9731-45531832b657",
      "name": "REGR_INTERCEPT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the intercept of the univariate linear regression line for non-null pairs in a group. It is computed for non-null pairs using the following formula:  AVG(y)-REGR_SLOPE(y,x)*AVG(x)  Where x is the independent variable and y is the dependent variable.",
      "content": "REGR_INTERCEPT(y, x)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Case Conversion/UPPER",
      "id": "1854173a-30cb-45b9-8bb4-8f8a0b542af4",
      "parent_folder_id": "c761a251-9d15-4a37-afd5-e0b5df1b3d17",
      "name": "UPPER",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the input string expr with all characters converted to uppercase.",
      "content": "UPPER( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Semi-structured Data Types/TO_ARRAY",
      "id": "18e91f3b-083e-4a48-a68a-03e6b3ad4cf8",
      "parent_folder_id": "750a5efc-98e9-4499-8f24-2b8d3f011e7e",
      "name": "TO_ARRAY",
      "entity_type": "SQL_ENTITY",
      "description": "Converts the input expression into an array:  If the input is an ARRAY, or VARIANT containing an array value, the result is unchanged.  For NULL or a JSON null input, returns NULL.  For any other value, the result is a single-element array containing this value.",
      "content": "TO_ARRAY( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Rank-related/RANK",
      "id": "199a353f-0262-4dc8-b103-ef35d5fc77d8",
      "parent_folder_id": "65dd50ca-a8ef-4ec2-85b0-fd1202f8109a",
      "name": "RANK",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the rank of a value within an ordered group of values.  The rank value starts at 1 and continues up.",
      "content": "RANK() OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] [ <window_frame> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Linear Regression/REGR_SXY",
      "id": "1a14c804-38aa-42ea-85bf-2d247c4b820b",
      "parent_folder_id": "b34304e2-db34-48cf-b339-214d4fc2b71b",
      "name": "REGR_SXY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns REGR_COUNT(expr1, expr2) * COVAR_POP(expr1, expr2) for non-null pairs.",
      "content": "REGR_SXY(y, x) OVER ( [ PARTITION BY <expr3> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAY_SLICE",
      "id": "1a1b66fe-1897-4d68-a279-b5f65906574d",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAY_SLICE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an array constructed from a specified subset of elements of the input array.",
      "content": "ARRAY_SLICE( <array> , <from> , <to> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Regular Expression Matching/REGEXP_SUBSTR",
      "id": "1b22d3d0-a635-4226-af85-7db7cf3366b6",
      "parent_folder_id": "8612cd4d-0c28-4e14-9735-673c6c7c0fe3",
      "name": "REGEXP_SUBSTR",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the substring that matches a regular expression within a string. If no match is found, returns NULL.",
      "content": "REGEXP_SUBSTR( <subject> , <pattern> [ , <position> [ , <occurrence> [ , <regex_parameters> [ , <group_num ] ] ] ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/STARTSWITH",
      "id": "1b673ac3-6cb8-4545-bffb-dd7242a4a850",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "STARTSWITH",
      "entity_type": "SQL_ENTITY",
      "description": "Returns true if expr1 starts with expr2. Both expressions must be text or binary expressions.",
      "content": "STARTSWITH( <expr1> , <expr2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Cryptographic/Checksum/SHA1 , SHA1_HEX",
      "id": "1caa1e53-a611-4f03-9775-453e60a5e857",
      "parent_folder_id": "22bce7c4-5bc3-4488-9a2b-f69d60e70a3e",
      "name": "SHA1 , SHA1_HEX",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a 40-character hex-encoded string containing the 160-bit SHA-1 message digest.  These functions are synonymous.",
      "content": "SHA1(<msg>)\r\n\r\nSHA1_HEX(<msg>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Data Generation Functions/Controlled Distribution/NORMAL",
      "id": "1cf4c394-a5b0-470e-b2ef-ec9d6279e964",
      "parent_folder_id": "35160c38-8f4a-414d-b9cb-42dc9323a0bb",
      "name": "NORMAL",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a normal-distributed floating point number, with specified mean and stddev (standard deviation).  This function is related to, but different from, the similar RANDOM function.  When RAND is called a large number of times, the results are more or less evenly distributed over the range of possible values. E.g. the number of results with values between 1000 and 2000 is similar to the number of values between 2000 and 3000.  When NORMAL is called a large number of times, the distribution of the results is likely to approximate a “normal” curve (sometimes called a “bell-shaped curve”). The center of the curve and the “breadth” of the curve are influenced by the mean and stddev parameters. Values closer to the specified mean are more likely to occur than values far from the mean.",
      "content": "NORMAL( <mean> , <stddev> , <gen> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Linear Regression/REGR_SYY",
      "id": "1dab3033-120a-45fc-8f32-e5c8beb4ff87",
      "parent_folder_id": "b34304e2-db34-48cf-b339-214d4fc2b71b",
      "name": "REGR_SYY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns REGR_COUNT(y, x) * VAR_POP(y) for non-null pairs.",
      "content": "REGR_SYY(y, x) ( [ PARTITION BY <expr3> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/STRTOK",
      "id": "1df60525-773d-410d-a626-2cb47e96e977",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "STRTOK",
      "entity_type": "SQL_ENTITY",
      "description": "Tokenizes a given string and returns the requested part.  If the requested part does not exist, then NULL is returned. If any parameter is NULL, then NULL is returned.",
      "content": "STRTOK(<string> [,<delimiter>] [,<partNr>])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Date and Time Data Types/TRY_TO_DATE",
      "id": "1e5a9628-5be5-4c5c-b952-c89567711644",
      "parent_folder_id": "6e41e97a-a871-4e06-a5d6-8043e830a4ae",
      "name": "TRY_TO_DATE",
      "entity_type": "SQL_ENTITY",
      "description": "A special version of TO_DATE that performs the same operation (i.e. converts an input expression to a date), but with error-handling support (i.e. if the conversion cannot be performed, it returns a NULL value instead of raising an error).",
      "content": "TRY_TO_DATE( <string_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Linear Regression/REGR_INTERCEPT",
      "id": "1e9ee410-f83f-49c5-a15a-29b114443968",
      "parent_folder_id": "b34304e2-db34-48cf-b339-214d4fc2b71b",
      "name": "REGR_INTERCEPT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the intercept of the univariate linear regression line for non-null pairs in a group. It is computed for non-null pairs using the following formula:  AVG(y)-REGR_SLOPE(y,x)*AVG(x)  Where x is the independent variable and y is the dependent variable.",
      "content": "REGR_INTERCEPT(y, x) OVER ( [ PARTITION BY <expr3> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Semi-structured Data Aggregation",
      "id": "1f12c73f-b2a1-49e7-9e2c-66f26cc4c4c8",
      "parent_folder_id": "fcfe29fe-a075-43ce-a750-5f0158cf6e1d",
      "name": "Semi-structured Data Aggregation",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Encoding/Decoding/HEX_ENCODE",
      "id": "1f17d8a6-40ac-4a58-8d0c-ff5e6d527c2d",
      "parent_folder_id": "fc4f363e-00a4-4fc8-bc33-839c887fa6d8",
      "name": "HEX_ENCODE",
      "entity_type": "SQL_ENTITY",
      "description": "Encodes the input using hexadecimal (also ‘hex’ or ‘base16’) encoding. The result is comprised of 16 different symbols: The numbers ‘0’ to ‘9’ as well as the letters ‘A’ to ‘F’ (or ‘a’ to ‘f’, see below).",
      "content": "HEX_ENCODE(<input> [, <case>])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/IS [ NOT ] DISTINCT FROM",
      "id": "20b863b3-c258-4755-acc6-029c9ca56de5",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "IS [ NOT ] DISTINCT FROM",
      "entity_type": "SQL_ENTITY",
      "description": "Compares whether two expressions are equal (or not equal). The function is NULL-safe, meaning it treats NULLs as known values for comparing equality. Note that this is different from the EQUAL comparison operator (=), which treats NULLs as unknown values.",
      "content": "<expr1> IS [ NOT ] DISTINCT FROM <expr2>",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Bitwise Expression Functions",
      "id": "21b07106-8121-442f-a8f4-58f90665d54d",
      "parent_folder_id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "name": "Bitwise Expression Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Exponent and Root/SQUARE",
      "id": "21caf6c9-08ee-408b-906d-ae2cd51dd3cc",
      "parent_folder_id": "5e2ca68b-b7dd-4508-beb0-a3520d531010",
      "name": "SQUARE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the square of a numeric expression, i.e. a numeric expression multiplied by itself.",
      "content": "SQUARE(expr)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/STRTOK_TO_ARRAY",
      "id": "2241df0e-8cba-48ff-b9b3-46f5a79c6b48",
      "parent_folder_id": "b0bbb22b-c561-4f62-a8b2-e3fc078023d5",
      "name": "STRTOK_TO_ARRAY",
      "entity_type": "SQL_ENTITY",
      "description": "Tokenizes the given string using the given set of delimiters and returns the tokens as an array.  If either parameter is a NULL, a NULL is returned. An empty array is returned if tokenization produces no tokens.",
      "content": "STRTOK_TO_ARRAY(<string> [,<delimiter>])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Cryptographic , Checksum",
      "id": "22bce7c4-5bc3-4488-9a2b-f69d60e70a3e",
      "parent_folder_id": "eb0a11a4-3341-43fe-af67-874f77b81187",
      "name": "Cryptographic , Checksum",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/TO_VARIANT",
      "id": "22cbb4ec-dae8-4fd8-ae6d-a55f4091cc29",
      "parent_folder_id": "b0bbb22b-c561-4f62-a8b2-e3fc078023d5",
      "name": "TO_VARIANT",
      "entity_type": "SQL_ENTITY",
      "description": "Converts any value to VARIANT value or NULL (if input is NULL).",
      "content": "TO_VARIANT( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Context/CURRENT_ACCOUNT",
      "id": "22f8238e-990f-4ecf-be29-ab5745f17783",
      "parent_folder_id": "825f6234-6811-4d6d-b615-78179c86c6fb",
      "name": "CURRENT_ACCOUNT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the account of the user currently logged into the system.",
      "content": "CURRENT_ACCOUNT()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Linear Regression/REGR_SLOPE",
      "id": "244f1bfb-1282-45f7-ab22-ebeb229fedd0",
      "parent_folder_id": "a66240bf-3b81-4d25-9731-45531832b657",
      "name": "REGR_SLOPE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the slope of the linear regression line for non-null pairs in a group. It is computed for non-null pairs using the following formula:  COVAR_POP(x,y) / VAR_POP(x)  Where x is the independent variable and y is the dependent variable.",
      "content": "REGR_SLOPE(y, x)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/IS_<object_type>/IS_OBJECT",
      "id": "248ec735-5f9a-465f-a732-2b29ce0065a9",
      "parent_folder_id": "d57aac71-2f6f-4994-88ba-95be21d9f5f1",
      "name": "IS_OBJECT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns TRUE if its VARIANT argument contains an OBJECT value.",
      "content": "IS_OBJECT( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Date and Time Data Types/TO_DATE",
      "id": "254a9978-a85a-4284-ab93-f81005107305",
      "parent_folder_id": "6e41e97a-a871-4e06-a5d6-8043e830a4ae",
      "name": "TO_DATE",
      "entity_type": "SQL_ENTITY",
      "description": "Converts an input expression to a date:  For a string expression, the result of converting the string to a date.  For a timestamp expression, the date from the timestamp.  For a variant expression:  If the variant contains a string, a string conversion is performed.  If the variant contains a date, the date value is preserved as is.  If the variant contains a JSON null value, the output is NULL.  For NULL input, the output is NULL.  For all other values, a conversion error is generated.",
      "content": "TO_DATE( <string_expr> [, <format> ] )\r\nTO_DATE( <timestamp_expr> )\r\nTO_DATE( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/RTRIMMED_LENGTH",
      "id": "26200ea7-d02c-4f03-a2c7-a3e8f2d64f86",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "RTRIMMED_LENGTH",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the length of its argument, minus trailing whitespace, but including leading whitespace.",
      "content": "RTRIMMED_LENGTH( <string_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Context/CURRENT_SESSION",
      "id": "262c1f27-82c2-409b-8e61-31dd2870de86",
      "parent_folder_id": "825f6234-6811-4d6d-b615-78179c86c6fb",
      "name": "CURRENT_SESSION",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a unique system identifier for the Snowflake session corresponding to the present connection. This will generally be a system-generated alphanumeric string. It is NOT derived from the user name or user account.",
      "content": "CURRENT_SESSION()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Any Data Type/TRY_CAST",
      "id": "26560845-0bf1-4319-a521-0f1917a9d858",
      "parent_folder_id": "aa279216-8902-489b-a538-cb69cfa8b75d",
      "name": "TRY_CAST",
      "entity_type": "SQL_ENTITY",
      "description": "A special version of CAST , :: that is available for a subset of data type conversions. It performs the same operation (i.e converts a value of one data type into another data type), but returns a NULL value instead of raising an error when the conversion can not be performed.",
      "content": "TRY_CAST( <source_string_expr> AS <target_data_type> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAY_AGG",
      "id": "267bd393-c360-45c6-8acc-14a7f8cc17a3",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAY_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the input values, pivoted into an ARRAY. If the input is empty, an empty ARRAY is returned.",
      "content": "Aggregate function\r\n\r\nARRAY_AGG( [ DISTINCT ] <expr1> ) [ WITHIN GROUP ( <orderby_clause> ) ]\r\nWindow function\r\n\r\nARRAY_AGG( [ DISTINCT ] <expr1> )\r\n    OVER ( [ PARTITION BY <expr2> ] )\r\n    [ WITHIN GROUP ( <orderby_clause> ) ]",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Object Context/CURRENT_DATABASE",
      "id": "26b2f29e-5a02-4464-a32b-930af84e5a66",
      "parent_folder_id": "3a5a5b5a-fd24-43da-9c77-857e34297ea0",
      "name": "CURRENT_DATABASE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the name of the database in use for the current session.  To specify a different database for the session, execute the USE DATABASE command.",
      "content": "CURRENT_DATABASE()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Control/SYSTEM$ABORT_TRANSACTION",
      "id": "27040665-ff36-4736-b895-19cad1789861",
      "parent_folder_id": "ee9e8013-0ca8-4768-8939-0ea70dbc892f",
      "name": "SYSTEM$ABORT_TRANSACTION",
      "entity_type": "SQL_ENTITY",
      "description": "Aborts the specified transaction, if it is running. If the transaction has already been committed or rolled back, then the state of the transaction is not altered.",
      "content": "SYSTEM$ABORT_TRANSACTION(<transaction_id>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Compression & Decompression",
      "id": "27206650-0fde-4914-a802-4ba1b393bda7",
      "parent_folder_id": "eb0a11a4-3341-43fe-af67-874f77b81187",
      "name": "Compression & Decompression",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/RESULT_SCAN",
      "id": "274a657d-ac4e-444b-a476-1f53c06e9153",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "RESULT_SCAN",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the result set of a previous command (within 24 hours of when you executed the query) as if the result was a table. This is particularly useful if you want to process the output from any of the following:  SHOW or DESC[RIBE] command that you executed.  Query you executed on metadata or account usage information, such as Information Schema or Account Usage.  The result of a stored procedure that you called.",
      "content": "RESULT_SCAN ( { '<query_id>'  | LAST_QUERY_ID() } )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Bitwise Expression Functions/BITXOR_AGG",
      "id": "275c5b43-0f36-40a6-aab6-40558b0124d8",
      "parent_folder_id": "21b07106-8121-442f-a8f4-58f90665d54d",
      "name": "BITXOR_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Same as BITXOR, but across all numeric records in group a.",
      "content": "BITXOR_AGG(a)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Data Generation Functions/Random/RANDSTR",
      "id": "27acf863-164e-420d-803a-200459b02700",
      "parent_folder_id": "d5803490-021e-4e48-8955-3c3e770ea146",
      "name": "RANDSTR",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a random string of specified length.",
      "content": "RANDSTR( <length> , <gen> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching & Comparison",
      "id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "parent_folder_id": "eb0a11a4-3341-43fe-af67-874f77b81187",
      "name": "Other Matching & Comparison",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/VAR_POP",
      "id": "285a4912-a94a-4bdb-a7b1-06ea29bbdc7e",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "VAR_POP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the population variance of non-NULL records in a group. If all records inside a group are NULL, a NULL is returned.",
      "content": "VAR_POP( [DISTINCT] <expr1> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Data Generation Functions/Controlled Distribution/ZIPF",
      "id": "28636e45-c0ce-4888-8f2a-aa5b0e062d5a",
      "parent_folder_id": "35160c38-8f4a-414d-b9cb-42dc9323a0bb",
      "name": "ZIPF",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a Zipf-distributed integer, for N elements and characteristic exponent s.",
      "content": "ZIPF( <s> , <N> , <gen> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/LPAD",
      "id": "28bb30cd-a590-4c43-9b3c-167266aabee0",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "LPAD",
      "entity_type": "SQL_ENTITY",
      "description": "Left-pads a string with characters from another string, or left-pads a binary value with bytes from another binary value.  The argument (base) is left-padded to length length_expr with characters/bytes from the pad argument.",
      "content": "LPAD(<base>, <length_expr> [, <pad>])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Compression/Decompression/COMPRESS",
      "id": "28c4b977-fe11-4af1-8ad2-51460db23835",
      "parent_folder_id": "27206650-0fde-4914-a802-4ba1b393bda7",
      "name": "COMPRESS",
      "entity_type": "SQL_ENTITY",
      "description": "Compresses the input string or binary value with a compression method.",
      "content": "COMPRESS(<input>, <method>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Rank-related/LAST_VALUE",
      "id": "28d75716-192e-4ee2-90d0-c045c099f8b5",
      "parent_folder_id": "65dd50ca-a8ef-4ec2-85b0-fd1202f8109a",
      "name": "LAST_VALUE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the last value within an ordered group of value",
      "content": "LAST_VALUE( <expr> ) [ { IGNORE | RESPECT } NULLS ]\r\n                     OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] [ <window_frame> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/PARSE_IP",
      "id": "28d9b9b7-11b9-4e71-b66a-1a5bc06d2b03",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "PARSE_IP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a JSON object consisting of all the components from a valid INET (Internet Protocol) or CIDR (Classless Internet Domain Routing) IPv4 or IPv6 string.",
      "content": "PARSE_IP(<expr>, '<type>' [, <permissive>])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Date and Time Data Types/TRY_TO_TIME",
      "id": "28f29194-5be1-4ee5-b9aa-01ef7eb66304",
      "parent_folder_id": "6e41e97a-a871-4e06-a5d6-8043e830a4ae",
      "name": "TRY_TO_TIME",
      "entity_type": "SQL_ENTITY",
      "description": "A special version of TO_TIME that performs the same operation (i.e. converts an input expression into a time), but with error-handling support (i.e. if the conversion cannot be performed, it returns a NULL value instead of raising an error).",
      "content": "TRY_TO_TIME( <string_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/PERCENTILE_DISC",
      "id": "2ad30e56-6782-47aa-b767-0169669a4af0",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "PERCENTILE_DISC",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a percentile value based on a discrete distribution of the input column (specified in order_by_expr). The returned value is that whose row has the smallest CUME_DIST value that is greater than or equal to the given percentile. NULL values are ignored in the calculation.",
      "content": "PERCENTILE_DISC( <percentile> ) WITHIN GROUP (ORDER BY <order_by_expr> ) OVER ( [ PARTITION BY <expr3> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/DATA_TRANSFER_HISTORY",
      "id": "2b1543af-5ca0-4795-aee9-506bb92e8bbd",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "DATA_TRANSFER_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "This table function can be used to query the history of data transferred from Snowflake tables into a different cloud storage provider’s network (i.e. from Snowflake on AWS or Microsoft Azure into the other cloud provider’s network) and/or geographical region within a specified date range. The function returns the history for your entire Snowflake account.",
      "content": "DATA_TRANSFER_HISTORY(\r\n      [ DATE_RANGE_START => <constant_expr> ]\r\n      [, DATE_RANGE_END => <constant_expr> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/ATAN2",
      "id": "2ccca2b5-ba48-4589-80f9-b7808257a641",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "ATAN2",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the inverse tangent (arc tangent) of the ratio of its two arguments (i.e. ATAN2(x,y) = ATAN(x/y)). The result is a number in the interval [-pi, pi].",
      "content": "ATAN2( <real_expr> , <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/UNICODE",
      "id": "2d53debd-4819-4ad6-a0c9-5cf7fc658fa1",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "UNICODE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the Unicode code point for the first Unicode character in a string. If the string is empty, a value of 0 is returned.",
      "content": "UNICODE( <input> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Date and Time Data Types/TRY_TO_TIMESTAMP , TRY_TO_TIMESTAMP_*",
      "id": "2dafbf55-2ab4-41a9-8b24-8fb21e63d071",
      "parent_folder_id": "6e41e97a-a871-4e06-a5d6-8043e830a4ae",
      "name": "TRY_TO_TIMESTAMP , TRY_TO_TIMESTAMP_*",
      "entity_type": "SQL_ENTITY",
      "description": "A special version of TO_TIMESTAMP / TO_TIMESTAMP_* that performs the same operation (i.e. converts an input expression into a timestamp), but with error-handling support (i.e. if the conversion cannot be performed, it returns a NULL value instead of raising an error).",
      "content": "timestampFunction ( <string_expr> )\r\nWhere:\r\n\r\ntimestampFunction ::=\r\n    TRY_TO_TIMESTAMP | TRY_TO_TIMESTAMP_LTZ | TRY_TO_TIMESTAMP_NTZ | TRY_TO_TIMESTAMP_TZ",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Context/CURRENT_ROLE",
      "id": "2e4f23c0-be1d-42e3-9116-c01d27a24776",
      "parent_folder_id": "825f6234-6811-4d6d-b615-78179c86c6fb",
      "name": "CURRENT_ROLE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the name of the role in use for the current session.  To specify a different role for the session, execute the USE ROLE command.",
      "content": "CURRENT_ROLE()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Text/Character/Binary Data Types/TO_CHAR , TO_VARCHAR",
      "id": "2f72bb40-a908-4b68-b59b-dc90e90e4a03",
      "parent_folder_id": "e1cc2707-c813-4249-8b67-665f06e2f5f7",
      "name": "TO_CHAR , TO_VARCHAR",
      "entity_type": "SQL_ENTITY",
      "description": "Converts the input expression to a string. For NULL input, the output is NULL.",
      "content": "TO_CHAR( <expr> )\r\nTO_CHAR( <numeric_expr> [, '<format>' ] )\r\nTO_CHAR( <date_or_time_expr> [, '<format>' ] )\r\nTO_CHAR( <binary_expr> [, '<format>' ] )\r\n\r\nTO_VARCHAR( <expr> )\r\nTO_VARCHAR( <numeric_expr> [, '<format>' ] )\r\nTO_VARCHAR( <date_or_time_expr> [, '<format>' ] )\r\nTO_VARCHAR( <binary_expr> [, '<format>' ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAY_POSITION",
      "id": "2fe8bc58-362b-4003-8f01-7f3c85523363",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAY_POSITION",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the index of the first occurrence of an element in an array.",
      "content": "ARRAY_POSITION( <variant_expr> , <array> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/STDDEV",
      "id": "30d678cf-4e65-4d8f-a6cc-7b8ba25720f4",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "STDDEV",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sample standard deviation (square root of sample variance) of non-NULL values. If all records inside a group are NULL, returns NULL.",
      "content": "STDDEV( <expr1> ) OVER (\r\n                       [ PARTITION BY <expr2> ]\r\n                       [ ORDER BY <expr3> [ ASC | DESC ] [ <window_frame> ] ]\r\n                       )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions",
      "id": "335f4fbe-d97c-42c0-9e16-99655156a8e1",
      "parent_folder_id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "name": "Numeric Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/EXTERNAL_TABLE_FILES",
      "id": "336cb5dc-b639-43a5-8fea-3e81e0459839",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "EXTERNAL_TABLE_FILES",
      "entity_type": "SQL_ENTITY",
      "description": "This table function can be used to query information about the staged data files included in the metadata for a specified external table.",
      "content": "EXTERNAL_TABLE_FILES(\r\n      TABLE_NAME => '<string>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Data Generation Functions/Controlled Distribution",
      "id": "35160c38-8f4a-414d-b9cb-42dc9323a0bb",
      "parent_folder_id": "f77ad3ce-991f-4aa3-99da-0cfcf4cde9b1",
      "name": "Controlled Distribution",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/JSON and XML Parsing/STRIP_NULL_VALUE",
      "id": "3520e85b-aa7c-41d0-a9e6-ad13956535e6",
      "parent_folder_id": "5dd856a1-477f-4b43-9935-0ee0dc3e0593",
      "name": "STRIP_NULL_VALUE",
      "entity_type": "SQL_ENTITY",
      "description": "Converts a JSON “null” value to a SQL NULL value. All other variant values are passed unchanged.",
      "content": "create or replace table mytable\r\n(\r\n  src variant\r\n);\r\n\r\ninsert into mytable\r\n  select parse_json(column1)\r\n  from values\r\n  ('{\r\n  \"a\": \"1\",\r\n  \"b\": \"2\",\r\n  \"c\": null\r\n  }')\r\n  , ('{\r\n  \"a\": \"1\",\r\n  \"b\": \"2\",\r\n  \"c\": \"3\"\r\n  }');\r\n\r\nselect strip_null_value(src:c) from mytable;",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/COVAR_POP",
      "id": "3537057f-7d1d-45c1-9b6b-fdfb8943dd15",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "COVAR_POP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the population covariance for non-null pairs in a group. It is computed for non-null pairs using the following formula:  (SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / COUNT(*)  Where x is the independent variable and y is the dependent variable.",
      "content": "COVAR_POP( y , x )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Extraction/MONTHNAME",
      "id": "353b6478-544c-4930-a599-465b7f40b83d",
      "parent_folder_id": "62449bd1-1a27-436a-bc28-c80445d53b14",
      "name": "MONTHNAME",
      "entity_type": "SQL_ENTITY",
      "description": "Extracts the three-letter month name from the specified date or timestamp.",
      "content": "MONTHNAME( <date_or_timestamp_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Rounding and Truncation/TRUNCATE , TRUNC",
      "id": "353b6600-65f2-44d1-bf99-35dee83605f8",
      "parent_folder_id": "c92cfc54-280e-4dc8-82f8-6599224e4332",
      "name": "TRUNCATE , TRUNC",
      "entity_type": "SQL_ENTITY",
      "description": "Rounds the input expression down to the nearest (or equal) integer closer to zero, or to the nearest equal or smaller value with the specified number of places after the decimal point.  These functions are synonymous.  Note  TRUNC is overloaded; it can also be used as a date/time function to truncate dates, times, and timestamps to a specified part.",
      "content": "TRUNCATE( <input_expr> [ , <scale_expr> ] )\r\n\r\nTRUNC( <input_expr> [ , <scale_expr> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Encoding/Decoding/TRY_HEX_DECODE_STRING",
      "id": "3597c0ce-714b-4aff-b07c-cb97a50cd77b",
      "parent_folder_id": "fc4f363e-00a4-4fc8-bc33-839c887fa6d8",
      "name": "TRY_HEX_DECODE_STRING",
      "entity_type": "SQL_ENTITY",
      "description": "A special version of HEX_DECODE_STRING that returns a NULL value if an error occurs during decoding.",
      "content": "TRY_HEX_DECODE_STRING(<input>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Regular Expression Matching/REGEXP_LIKE",
      "id": "35d1bd40-5e14-417a-a292-c3e516224bf1",
      "parent_folder_id": "8612cd4d-0c28-4e14-9735-673c6c7c0fe3",
      "name": "REGEXP_LIKE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns true if the subject matches the pattern. Both expressions must be text expressions.",
      "content": "REGEXP_LIKE( <subject> , <pattern> [ , <parameters> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Rank-related/LAG",
      "id": "35d94d25-b3bd-41a3-ba76-00ad61a42780",
      "parent_folder_id": "65dd50ca-a8ef-4ec2-85b0-fd1202f8109a",
      "name": "LAG",
      "entity_type": "SQL_ENTITY",
      "description": "Accesses data in a previous row in the same result set without having to join the table to itself.",
      "content": "LAG ( <expr> [ , <offset> , <default> ] ) [ { IGNORE | RESPECT } NULLS ]\r\n    OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Regular Expression Matching/REGEXP",
      "id": "36768511-9473-495c-aed4-72ce0e9dfeb7",
      "parent_folder_id": "8612cd4d-0c28-4e14-9735-673c6c7c0fe3",
      "name": "REGEXP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns true if the subject matches the specified pattern. Both inputs must be text expressions.",
      "content": "<subject> REGEXP <pattern>",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/General Context",
      "id": "36ae0251-1bcc-4e7b-8fe5-e083565069d8",
      "parent_folder_id": "8cdf7bdd-0a1f-4e82-b5be-0fd365e27aad",
      "name": "General Context",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Bitwise Aggregation/BITAND_AGG",
      "id": "36bc6870-5634-40dc-882d-3950d66c6ded",
      "parent_folder_id": "6238bea1-d58f-46d2-a484-024bd53cb4f3",
      "name": "BITAND_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the bitwise AND value of all non-NULL numeric records in a group.  For each bit position, if all rows have the bit set to 1, then the bit is set to 1 in the result. If any rows have that bit set to zero, the result is zero.  If all records inside the group are NULL, or if the group is empty, the function returns NULL.",
      "content": "BITAND_AGG( <expr1> ) OVER ( [ PARTITION BY <expr2> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Exponent and Root/SQRT",
      "id": "36d00045-fc57-438a-9a7e-e1053dbddd5e",
      "parent_folder_id": "5e2ca68b-b7dd-4508-beb0-a3520d531010",
      "name": "SQRT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the square-root of a non-negative numeric expression.",
      "content": "SQRT(expr)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Context/CURRENT_TRANSACTION",
      "id": "36d8b266-57c3-40dd-bf67-86e559b94a9f",
      "parent_folder_id": "825f6234-6811-4d6d-b615-78179c86c6fb",
      "name": "CURRENT_TRANSACTION",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the transaction id of an open transaction in the current session.",
      "content": "CURRENT_TRANSACTION()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/AUTOMATIC_CLUSTERING_HISTORY",
      "id": "3708901a-00c5-4dda-8c73-9c1f4e750e06",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "AUTOMATIC_CLUSTERING_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "This table function is used for querying the Automatic Clustering history for given tables within a specified date range. The information returned by the function includes the credits consumed, bytes updated, and rows updated each time a table is reclustered.",
      "content": "AUTOMATIC_CLUSTERING_HISTORY(\r\n      [ DATE_RANGE_START => <constant_expr> ]\r\n      [ , DATE_RANGE_END => <constant_expr> ]\r\n      [ , TABLE_NAME => '<string>' ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$WHITELIST",
      "id": "376a39f0-14f2-4946-848e-5f582421fe21",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$WHITELIST",
      "entity_type": "SQL_ENTITY",
      "description": "Returns hostnames and port numbers to add to your firewall’s whitelist so that you can access Snowflake from behind your firewall. The output of this function can then be passed into the Snowflake Connectivity Diagnostic Tool (SnowCD).  Typically, Snowflake customers use a firewall to prevent unauthorized access. By default, your firewall might block access to Snowflake. To update your firewall’s whitelist, you need to know the hostnames and port numbers for your Snowflake account, stages, and other other hosts used by Snowflake.",
      "content": "SYSTEM$WHITELIST()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Semi-structured Data Aggregation/ARRAY_AGG",
      "id": "3792802c-9dba-4cb6-b4cf-1f040b7cd9b3",
      "parent_folder_id": "1f12c73f-b2a1-49e7-9e2c-66f26cc4c4c8",
      "name": "ARRAY_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the input values, pivoted into an ARRAY. If the input is empty, an empty ARRAY is returned.",
      "content": "ARRAY_AGG( [ DISTINCT ] <expr1> ) [ WITHIN GROUP ( <orderby_clause> ) ]",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/SOUNDEX",
      "id": "37a9e0f9-a003-460c-b894-87c208c8a528",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "SOUNDEX",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a string that contains a phonetic representation of the input string.  This function is typically used to help determine whether two strings, such as the family names Levine and Lavine, or the words to and too, have similar English-language pronunciation.",
      "content": "SOUNDEX( <varchar_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/COVAR_SAMP",
      "id": "3962a259-6bbc-45c7-91f6-1bef9bd64a41",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "COVAR_SAMP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sample covariance for non-null pairs in a group. It is computed for non-null pairs using the following formula:  (SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / (COUNT(*) - 1)  Where x is the independent variable and y is the dependent variable.",
      "content": "COVAR_SAMP( y , x ) OVER ( [ PARTITION BY <expr1> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/IFF",
      "id": "39b56ddc-c537-472f-a41c-6f3d1e6bb95c",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "IFF",
      "entity_type": "SQL_ENTITY",
      "description": "Single-level if-then-else expression. Similar to CASE, but only allows a single condition.  If condition evaluates to TRUE, returns expr1, otherwise returns expr2.",
      "content": "IFF( <condition> , <expr1> , <expr2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Rank-related/FIRST_VALUE",
      "id": "3a3d4525-d3e5-4aef-90f4-933038e4e19e",
      "parent_folder_id": "65dd50ca-a8ef-4ec2-85b0-fd1202f8109a",
      "name": "FIRST_VALUE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the first value within an ordered group of values.",
      "content": "FIRST_VALUE( <expr> ) [ { IGNORE | RESPECT } NULLS ]\r\n                      OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2>  [ { ASC | DESC } ] [ <window_frame> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Object Context",
      "id": "3a5a5b5a-fd24-43da-9c77-857e34297ea0",
      "parent_folder_id": "8cdf7bdd-0a1f-4e82-b5be-0fd365e27aad",
      "name": "Session Object Context",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Statistics and Probability/SKEW",
      "id": "3c7dacaa-9152-4c95-9cf7-baa429df8fe6",
      "parent_folder_id": "4b9e8234-9de0-470d-8a70-5fb7f1ca7225",
      "name": "SKEW",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sample skewness of non-NULL records. If all records inside a group are NULL, the function returns NULL.  The following formula is used to compute the sample skewness:  (n^2)/((n-1) * (n-2)) * (m_3/(k_2)^(1.5))  where:  n denotes the number of non-null records.  m_3 denotes the sample third central moment.  k_2 denotes the symmetric unbiased estimator of the variance.  Intuitively, skew describes how asymmetric the underlying distribution is.",
      "content": "SKEW( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Linear Regression/REGR_AVGX",
      "id": "3d15c01c-524c-4671-a9ec-67f2ff6f779d",
      "parent_folder_id": "a66240bf-3b81-4d25-9731-45531832b657",
      "name": "REGR_AVGX",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the average of the independent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.",
      "content": "REGR_AVGX(y, x)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/VARIANCE , VARIANCE_SAMP",
      "id": "3d5bf709-8c51-4a3d-8e97-fdb60bc1a2fa",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "VARIANCE , VARIANCE_SAMP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sample variance of non-NULL records in a group. If all records inside a group are NULL, a NULL is returned.",
      "content": "VARIANCE( [DISTINCT] <expr1> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Boolean Aggregation",
      "id": "3db94cb8-8831-41b6-84f5-2242a3f45266",
      "parent_folder_id": "abf8186d-0346-4582-a27f-871904d4bee2",
      "name": "Boolean Aggregation",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/CONTAINS",
      "id": "3f2a12f9-67fe-40e8-bb74-ce109f7821f3",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "CONTAINS",
      "entity_type": "SQL_ENTITY",
      "description": "Returns true if expr1 contains expr2. Both expressions must be text or binary expressions.",
      "content": "CONTAINS( <expr1> , <expr2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Bitwise Aggregation",
      "id": "3f9c9987-4b5c-423c-9ef8-db538d930d08",
      "parent_folder_id": "fcfe29fe-a075-43ce-a750-5f0158cf6e1d",
      "name": "Bitwise Aggregation",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Semi-structured Data Types/TO_VARIANT",
      "id": "40561437-f9ce-4b9f-a4b8-66112fa98bdf",
      "parent_folder_id": "750a5efc-98e9-4499-8f24-2b8d3f011e7e",
      "name": "TO_VARIANT",
      "entity_type": "SQL_ENTITY",
      "description": "Converts any value to VARIANT value or NULL (if input is NULL).",
      "content": "TO_VARIANT( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/FLATTEN",
      "id": "4210502e-1acd-4e60-9b06-af741060c221",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "FLATTEN",
      "entity_type": "SQL_ENTITY",
      "description": "Flattens (explodes) compound values into multiple rows.  FLATTEN is a table function that takes a VARIANT, OBJECT, or ARRAY column and produces a lateral view (i.e. an inline view that contains correlation referring to other tables that precede it in the FROM clause).  FLATTEN can be used to convert semi-structured data to a relational representation.",
      "content": "FLATTEN( INPUT => <expr> [ , PATH => <constant_expr> ]\r\n                         [ , OUTER => TRUE | FALSE ]\r\n                         [ , RECURSIVE => TRUE | FALSE ]\r\n                         [ , MODE => 'OBJECT' | 'ARRAY' | 'BOTH' ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Exponent and Root/CBRT",
      "id": "423ed700-736a-4d4c-b269-224bd12bb7f4",
      "parent_folder_id": "5e2ca68b-b7dd-4508-beb0-a3520d531010",
      "name": "CBRT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the cubic root of a numeric expression.",
      "content": "CBRT(expr)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/JSON and XML Parsing/CHECK_JSON",
      "id": "4266f0ca-f5c6-4be1-956d-5cd91217db9d",
      "parent_folder_id": "5dd856a1-477f-4b43-9935-0ee0dc3e0593",
      "name": "CHECK_JSON",
      "entity_type": "SQL_ENTITY",
      "description": "Checks the validity of a JSON document. If the input string is a valid JSON document or a NULL, the output is NULL (i.e. no error). If the input cannot be translated to a valid JSON value, the output string contains the error message.",
      "content": "CHECK_JSON( <string_or_variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Rounding and Truncation/FLOOR",
      "id": "42d82e60-84f5-43ae-a98d-fc327ea081f6",
      "parent_folder_id": "c92cfc54-280e-4dc8-82f8-6599224e4332",
      "name": "FLOOR",
      "entity_type": "SQL_ENTITY",
      "description": "Returns values from input_expr rounded to the nearest equal or smaller integer, or to the nearest equal or smaller value with the specified number of places after the decimal point.",
      "content": "FLOOR( <input_expr> [, <scale_expr> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/STDDEV_POP",
      "id": "430edcaa-cd0d-4933-bac8-b44e24caf616",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "STDDEV_POP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the population standard deviation (square root of variance) of non-NULL values. If all records inside a group are NULL, returns NULL.",
      "content": "STDDEV_POP( <expr1> ) OVER (\r\n                           [ PARTITION BY <expr2> ]\r\n                           [ ORDER BY <expr3> [ ASC | DESC ] [ <window_frame> ] ]\r\n                           )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/DATABASE_STORAGE_USAGE_HISTORY",
      "id": "4382393f-2c63-4291-9166-8600a4984e5c",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "DATABASE_STORAGE_USAGE_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "This table function can be used to query the average daily storage usage, in bytes, for a single database (or all the databases in your account) within a specified date range. The results include:  All data stored in tables and materialized views in the database(s).  All historical data maintained in Fail-safe for the database(s).",
      "content": "DATABASE_STORAGE_USAGE_HISTORY(\r\n      [ DATE_RANGE_START => <constant_expr> ]\r\n      [, DATE_RANGE_END => <constant_expr> ]\r\n      [, DATABASE_NAME => '<string>' ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Truncation/DATE_TRUNC",
      "id": "4388e487-e4fa-4ddf-9ea4-3131b937cb64",
      "parent_folder_id": "5731b996-7309-4f9b-9dd3-32954fd4098f",
      "name": "DATE_TRUNC",
      "entity_type": "SQL_ENTITY",
      "description": "Truncates a DATE, TIME, or TIMESTAMP to the specified precision.  Note that truncation is not the same as extraction. For example:  Truncating a timestamp down to the quarter returns the timestamp corresponding to midnight of the first day of the quarter for the input timestamp.  Extracting the quarter date part from a timestamp returns the quarter number of the year in the timestamp.",
      "content": "DATE_TRUNC( <date_or_time_part>, <date_or_time_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/General Context/CURRENT_DATE",
      "id": "44da75aa-ac53-45f5-9dcf-c59f01cfca74",
      "parent_folder_id": "36ae0251-1bcc-4e7b-8fe5-e083565069d8",
      "name": "CURRENT_DATE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the current date of the system.",
      "content": "CURRENT_DATE()\r\n\r\nCURRENT_DATE",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Bitwise Aggregation/BITXOR_AGG",
      "id": "459b4abc-21bf-4cd3-b0cc-2412d5c95ef0",
      "parent_folder_id": "6238bea1-d58f-46d2-a484-024bd53cb4f3",
      "name": "BITXOR_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the bitwise XOR value of all non-NULL numeric records in a group.  In each bit position, if an even number of rows have that bit set to 1, then the function returns 0 for that bit, and if an odd number of rows have that bit set to 1, then the function returns 1 for that bit.  If all records inside the group are NULL, or if the group is empty, the function returns NULL.",
      "content": "BITXOR_AGG( [ DISTINCT ] <expr1> ) OVER ( [ PARTITION BY <expr2> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Semi-structured Data Aggregation/OBJECT_AGG",
      "id": "45f19041-069b-4121-ba6d-ae63903632ce",
      "parent_folder_id": "1f12c73f-b2a1-49e7-9e2c-66f26cc4c4c8",
      "name": "OBJECT_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns one OBJECT per group. For each (key, value) input pair, where key must be a VARCHAR and value must be a VARIANT, the resulting OBJECT contains a key:value field.",
      "content": "OBJECT_AGG(<key>, <value>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/SUM",
      "id": "4658f920-3c40-46cb-9a55-0c9f8bd7087e",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "SUM",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sum of non-NULL records for expr. You can use the DISTINCT keyword to compute the sum of unique non-null values. If all records inside a group are NULL, the function returns NULL.",
      "content": "SUM( <expr1> ) OVER ( [ PARTITION BY <expr2> ] [ ORDER BY <expr3> [ ASC | DESC ] [ <window_frame> ] ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Construction/TIMESTAMP_FROM_PARTS",
      "id": "46eb910f-d0b0-4780-8cca-f5489d52297d",
      "parent_folder_id": "b62be236-8cc0-4a06-8733-aab6550fe3f3",
      "name": "TIMESTAMP_FROM_PARTS",
      "entity_type": "SQL_ENTITY",
      "description": "Creates a timestamp from individual numeric components. If no time zone is in effect, the function can be used to create a timestamp from a date expression and a time expression.  Aliases: TIMESTAMPFROMPARTS",
      "content": "TIMESTAMP_FROM_PARTS( <year>, <month>, <day>, <hour>, <minute>, <second> [, <nanosecond> ] [, <time_zone> ] )\r\n\r\nTIMESTAMP_FROM_PARTS( <date_expr>, <time_expr> )\r\nTIMESTAMP_LTZ_FROM_PARTS( <year>, <month>, <day>, <hour>, <minute>, <second> [, <nanosecond>] )\r\nTIMESTAMP_NTZ_FROM_PARTS( <year>, <month>, <day>, <hour>, <minute>, <second> [, <nanosecond>] )\r\n\r\nTIMESTAMP_NTZ_FROM_PARTS( <date_expr>, <time_expr> )\r\nTIMESTAMP_TZ_FROM_PARTS( <year>, <month>, <day>, <hour>, <minute>, <second> [, <nanosecond>] [, <time_zone>] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/REVERSE",
      "id": "47337b7c-4f98-4e5e-ace1-872ec7d8b43b",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "REVERSE",
      "entity_type": "SQL_ENTITY",
      "description": "Reverses the order of characters in a string, or of bytes in a binary value.  The returned value is the same length as the input, but with the characters/bytes in reverse order. If subject is NULL, the result is also NULL.",
      "content": "REVERSE(<subject>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Extraction/GET_PATH , :",
      "id": "47938cca-9537-49b3-9dd6-c3a2b6462c1c",
      "parent_folder_id": "f3987910-66c2-49ad-a80f-63146c591214",
      "name": "GET_PATH , :",
      "entity_type": "SQL_ENTITY",
      "description": "Extracts a value from semi-structured data using a path name.  GET_PATH is a variation of GET; it takes a VARIANT, OBJECT, or ARRAY column name as the first argument, and extracts the VARIANT value of the field or the element according to the path name provided as the second argument.",
      "content": "GET_PATH( <column_identifier> , '<path_name>' )\r\n\r\n<column_identifier>:<path_name>\r\n\r\n:( <column_identifier> , '<path_name>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$STREAM_GET_TABLE_TIMESTAMP",
      "id": "47a44ae8-d7bf-4295-a915-0e022542c3b1",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$STREAM_GET_TABLE_TIMESTAMP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a timestamp indicating the transactional point when the stream contents were last consumed using a DML statement.",
      "content": "SYSTEM$STREAM_GET_TABLE_TIMESTAMP('<stream_name>')",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Rank-related/NTILE",
      "id": "480cb710-f212-456a-a468-78d2e05b1369",
      "parent_folder_id": "65dd50ca-a8ef-4ec2-85b0-fd1202f8109a",
      "name": "NTILE",
      "entity_type": "SQL_ENTITY",
      "description": "Divides an ordered data set equally into the number of buckets specified by constant_value. Buckets are sequentially numbered 1 through constant_value.",
      "content": "NTILE( <constant_value> ) OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/TAN",
      "id": "48256371-d359-4c4c-9765-e705347f2ade",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "TAN",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the tangent of its argument; the argument should be expressed in radians.",
      "content": "TAN( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/AS_<object_type>",
      "id": "48876c3a-68ff-4922-afd0-99dfaa4624cd",
      "parent_folder_id": "b0bbb22b-c561-4f62-a8b2-e3fc078023d5",
      "name": "AS_<object_type>",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions",
      "id": "4a7ef3e8-5d01-4e1f-b360-ec1c49c90320",
      "parent_folder_id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "name": "Date & Time Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Statistics & Probability",
      "id": "4b9e8234-9de0-470d-8a70-5fb7f1ca7225",
      "parent_folder_id": "fcfe29fe-a075-43ce-a750-5f0158cf6e1d",
      "name": "Statistics & Probability",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/IS_<object_type>/IS_DECIMAL",
      "id": "4be07b3d-0c42-4d99-ad77-0257ddb116bb",
      "parent_folder_id": "d57aac71-2f6f-4994-88ba-95be21d9f5f1",
      "name": "IS_DECIMAL",
      "entity_type": "SQL_ENTITY",
      "description": "Returns TRUE if its VARIANT argument contains a fixed-point decimal value or integer.",
      "content": "IS_DECIMAL( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/NVL",
      "id": "4bf57ea4-e05a-49e9-87cc-8f1d1acc3b03",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "NVL",
      "entity_type": "SQL_ENTITY",
      "description": "If expr1 is NULL, returns expr2, otherwise returns expr1.",
      "content": "NVL( <expr1> , <expr2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Cryptographic/Checksum/MD5 , MD5_HEX",
      "id": "4c3608d5-e11d-4382-80e4-790024fe6c1d",
      "parent_folder_id": "22bce7c4-5bc3-4488-9a2b-f69d60e70a3e",
      "name": "MD5 , MD5_HEX",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a 32-character hex-encoded string containing the 128-bit MD5 message digest.  These functions are synonymous.",
      "content": "MD5(<msg>)\r\n\r\nMD5_HEX(<msg>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Bitwise Aggregation/BITXOR_AGG",
      "id": "4c8f9c28-3374-49d6-972b-f880158cbb64",
      "parent_folder_id": "3f9c9987-4b5c-423c-9ef8-db538d930d08",
      "name": "BITXOR_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the bitwise XOR value of all non-NULL numeric records in a group.  In each bit position, if an even number of rows have that bit set to 1, then the function returns 0 for that bit, and if an odd number of rows have that bit set to 1, then the function returns 1 for that bit.  If all records inside the group are NULL, or if the group is empty, the function returns NULL.",
      "content": "BITXOR_AGG( [ DISTINCT ] <expr1> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/AS_<object_type>/AS_DATE",
      "id": "4e35125b-c989-4819-a1a4-45b97cc856db",
      "parent_folder_id": "48876c3a-68ff-4922-afd0-99dfaa4624cd",
      "name": "AS_DATE",
      "entity_type": "SQL_ENTITY",
      "description": "Casts a VARIANT value to a date. Does not convert from timestamps.",
      "content": "AS_DATE( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Hash (Non-cryptographic)/HASH_AGG",
      "id": "4e4156f9-0e79-42d0-ad16-c1fcb5910505",
      "parent_folder_id": "85e9a5e0-5801-41b4-9afc-8550d2b50e83",
      "name": "HASH_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an aggregate signed 64-bit hash value over the (unordered) set of input rows. HASH_AGG never returns NULL, even if no input is provided. Empty input “hashes” to 0.  One use for aggregate hash functions is to detect changes to a set of values without comparing the individual old and new values. HASH_AGG can compute a single hash value based on many inputs; almost any change to one of the inputs is likely to result in a change to the output of the HASH_AGG function. Comparing two lists of values typically requires sorting both lists, but HASH_AGG produces the same value regardless of the order of the inputs. Because the values don’t need to be sorted for HASH_AGG, performance is typically much faster.",
      "content": "HASH_AGG( [ DISTINCT ] <expr> [ , <expr2> ... ] )\r\n\r\nHASH_AGG(*)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/IS_<object_type>/IS_TIME",
      "id": "4e953090-e65d-49ba-b58f-b299df4a02ea",
      "parent_folder_id": "d57aac71-2f6f-4994-88ba-95be21d9f5f1",
      "name": "IS_TIME",
      "entity_type": "SQL_ENTITY",
      "description": "Verifies whether a VARIANT value contains a TIME value.",
      "content": "IS_TIME( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Cryptographic/Checksum/MD5_BINARY",
      "id": "4fbd0450-a4be-4fc8-ab6a-5b72e6527178",
      "parent_folder_id": "22bce7c4-5bc3-4488-9a2b-f69d60e70a3e",
      "name": "MD5_BINARY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a 16-byte BINARY value containing the 128-bit MD5 message digest.",
      "content": "MD5_BINARY(<msg>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/AS_<object_type>/AS_ARRAY",
      "id": "4fdd2bc9-4dfd-42d9-bbe6-e102e690a708",
      "parent_folder_id": "48876c3a-68ff-4922-afd0-99dfaa4624cd",
      "name": "AS_ARRAY",
      "entity_type": "SQL_ENTITY",
      "description": "Casts a VARIANT value to an array.",
      "content": "AS_ARRAY( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Rank-related/NTH_VALUE",
      "id": "518ca187-4346-4ebe-b607-98a354bbb6e2",
      "parent_folder_id": "65dd50ca-a8ef-4ec2-85b0-fd1202f8109a",
      "name": "NTH_VALUE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the nth value (up to 1000) within an ordered group of values.",
      "content": "NTH_VALUE( <expr> , n ) [ FROM { FIRST | LAST } ] [ { IGNORE | RESPECT } NULLS ]\r\n                        OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] [ <window_frame> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Cryptographic/Checksum/SHA2 , SHA2_HEX",
      "id": "51a4708d-75b7-4720-b9fa-e0bff771b838",
      "parent_folder_id": "22bce7c4-5bc3-4488-9a2b-f69d60e70a3e",
      "name": "SHA2 , SHA2_HEX",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a hex-encoded string containing the N-bit SHA-2 message digest, where N is the specified output digest size.  These functions are synonymous.",
      "content": "SHA2( <msg> [, <digest_size>] )\r\n\r\nSHA2_HEX( <msg> [, <digest_size>] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$LAST_CHANGE_COMMIT_TIME",
      "id": "5263a2e8-f224-4d3b-a082-8b1b8e37f9df",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$LAST_CHANGE_COMMIT_TIME",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the commit time of the last DML change performed on a table or a view. In case of a view, the function returns the latest commit time of all the objects referenced in the view.  For each DML performed on the specified table or underlying tables in the specified view, the returned value increases; however, this value should not be interpreted as or converted to a timestamp.  Note that the function must be called as a system function, i.e. SYSTEM$LAST_CHANGE_COMMIT_TIME.",
      "content": "SYSTEM$LAST_CHANGE_COMMIT_TIME( '<object_name>'  )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/COPY_HISTORY",
      "id": "5264f883-13f8-4460-80bc-97866119aac5",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "COPY_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "This table function can be used to query Snowflake data loading history along various dimensions. The function returns load activity for both COPY INTO <table> statements and continuous data loading using Snowpipe. The table function avoids the 10,000 row limitation of the LOAD_HISTORY View. The results can be filtered using SQL predicates.",
      "content": "COPY_HISTORY(\r\n      TABLE_NAME => '<string>'\r\n       , START_TIME => <constant_expr>\r\n      [, END_TIME => <constant_expr> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Extraction/HOUR , MINUTE , SECOND",
      "id": "52ef6dfa-5a20-4212-aa55-abd72ea9b65d",
      "parent_folder_id": "62449bd1-1a27-436a-bc28-c80445d53b14",
      "name": "HOUR , MINUTE , SECOND",
      "entity_type": "SQL_ENTITY",
      "description": "Extracts the corresponding time part from a time or timestamp value.  These functions are alternatives to using the DATE_PART (or EXTRACT) function with the equivalent time part (see Supported Date and Time Parts).",
      "content": "HOUR( <time_or_timestamp_expr> )\r\n\r\nMINUTE( <time_or_timestamp_expr> )\r\n\r\nSECOND( <time_or_timestamp_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Control/SYSTEM$ABORT_SESSION",
      "id": "53de3201-ede4-4992-a71d-92b47a8d6b8f",
      "parent_folder_id": "ee9e8013-0ca8-4768-8939-0ea70dbc892f",
      "name": "SYSTEM$ABORT_SESSION",
      "entity_type": "SQL_ENTITY",
      "description": "Aborts the specified session.",
      "content": "SYSTEM$ABORT_SESSION( <session_id> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Extraction/PREVIOUS_DAY",
      "id": "54250c03-df7c-4559-a856-b8ee27057f5b",
      "parent_folder_id": "62449bd1-1a27-436a-bc28-c80445d53b14",
      "name": "PREVIOUS_DAY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the date of the first specified DOW (day of week) that occurs before the input date.",
      "content": "PREVIOUS_DAY( <date_or_time_expr> , <dow> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Encoding/Decoding/TRY_BASE64_DECODE_STRING",
      "id": "545a0381-352c-4f22-a223-bba0b6a1540f",
      "parent_folder_id": "fc4f363e-00a4-4fc8-bc33-839c887fa6d8",
      "name": "TRY_BASE64_DECODE_STRING",
      "entity_type": "SQL_ENTITY",
      "description": "A special version of BASE64_DECODE_STRING that returns a NULL value if an error occurs during decoding.  BASE64_DECODE_STRING and TRY_BASE64_DECODE_STRING are “reciprocal” (or “converse”) functions of BASE64_ENCODE.",
      "content": "TRY_BASE64_DECODE_STRING(<input> [, <alphabet>])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/SPLIT_TO_TABLE",
      "id": "548dbc4b-e486-493b-ad56-e4e63e39d040",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "SPLIT_TO_TABLE",
      "entity_type": "SQL_ENTITY",
      "description": "This table function splits a string (based on a specified delimiter) and flattens the results into rows.",
      "content": "SPLIT_TO_TABLE(<string>, <delimiter>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Case Conversion/INITCAP",
      "id": "54905c14-8b15-4070-b11c-458b17c3c200",
      "parent_folder_id": "c761a251-9d15-4a37-afd5-e0b5df1b3d17",
      "name": "INITCAP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the input string (expr) with the first letter of each word in uppercase and the subsequent letters in lowercase.",
      "content": "INITCAP( <expr> [ , <delimiters> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/VARIANCE_POP",
      "id": "54e16212-c343-4692-b041-3e71c4011e50",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "VARIANCE_POP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the population variance of non-NULL records in a group. If all records inside a group are NULL, a NULL is returned.",
      "content": "VARIANCE_POP( <expr1> ) OVER (\r\n                             [ PARTITION BY <expr2> ]\r\n                             [ ORDER BY <expr3> [ ASC | DESC ] [ <window_frame> ] ]\r\n                             )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/IS_<object_type>/IS_DATE , IS_DATE_VALUE",
      "id": "550f4dd6-dfae-47da-8f4a-c4a248a188ce",
      "parent_folder_id": "d57aac71-2f6f-4994-88ba-95be21d9f5f1",
      "name": "IS_DATE , IS_DATE_VALUE",
      "entity_type": "SQL_ENTITY",
      "description": "Verifies whether a VARIANT value contains a DATE value.  These functions are synonymous.",
      "content": "IS_DATE( <variant_expr> )\r\n\r\nIS_DATE_VALUE( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Compression/Decompression/DECOMPRESS_BINARY",
      "id": "55c4804a-a07d-4344-9c24-f7bd8534bb52",
      "parent_folder_id": "27206650-0fde-4914-a802-4ba1b393bda7",
      "name": "DECOMPRESS_BINARY",
      "entity_type": "SQL_ENTITY",
      "description": "Decompresses the compressed BINARY input parameter.",
      "content": "DECOMPRESS_BINARY(<input>, <method>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Logarithmic",
      "id": "56eda230-7ff2-4e49-8e70-8db1f14f2e6a",
      "parent_folder_id": "335f4fbe-d97c-42c0-9e16-99655156a8e1",
      "name": "Logarithmic",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAY_PREPEND",
      "id": "57242988-b276-45c8-a112-797b1c897ea4",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAY_PREPEND",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an array containing the new element as well as all elements from the source array. The new element is positioned at the beginning of the array.",
      "content": "ARRAY_PREPEND( <array> , <new_element> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Truncation",
      "id": "5731b996-7309-4f9b-9dd3-32954fd4098f",
      "parent_folder_id": "4a7ef3e8-5d01-4e1f-b360-ec1c49c90320",
      "name": "Truncation",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAY_CONTAINS",
      "id": "5746d736-fa2e-4200-ad69-e80915f63562",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAY_CONTAINS",
      "entity_type": "SQL_ENTITY",
      "description": "Returns True if the specified variant is found in the specified array.",
      "content": "ARRAY_CONTAINS( <variant> , <array> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Bitwise Expression Functions/BITSHIFTRIGHT",
      "id": "57b1dd50-f33b-4114-8b36-a9f631a2f345",
      "parent_folder_id": "21b07106-8121-442f-a8f4-58f90665d54d",
      "name": "BITSHIFTRIGHT",
      "entity_type": "SQL_ENTITY",
      "description": "Shift the bits for a numeric expression n positions to the right, with sign extension.",
      "content": "BITSHIFTRIGHT(a, n)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Linear Regression/REGR_SLOPE",
      "id": "58de71c5-ad92-409a-a892-073cd9b19653",
      "parent_folder_id": "b34304e2-db34-48cf-b339-214d4fc2b71b",
      "name": "REGR_SLOPE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the slope of the linear regression line for non-null pairs in a group. It is computed for non-null pairs using the following formula:  COVAR_POP(x,y) / VAR_POP(x)  Where x is the independent variable and y is the dependent variable.",
      "content": "REGR_SLOPE(y, x) OVER ( [ PARTITION BY <expr3> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Object Context/CURRENT_SCHEMAS",
      "id": "5935e041-fcd0-4a11-a891-c7ce4cbab786",
      "parent_folder_id": "3a5a5b5a-fd24-43da-9c77-857e34297ea0",
      "name": "CURRENT_SCHEMAS",
      "entity_type": "SQL_ENTITY",
      "description": "Returns active search path schemas.",
      "content": "CURRENT_SCHEMAS()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Conversion/TO_TIMESTAMP , TO_TIMESTAMP_*",
      "id": "5a82f844-d474-4e40-834c-a6e75d73f831",
      "parent_folder_id": "e4d0270c-a448-41ae-8887-adf78ec1a418",
      "name": "TO_TIMESTAMP , TO_TIMESTAMP_*",
      "entity_type": "SQL_ENTITY",
      "description": "Converts an input expression into the corresponding timestamp:  TO_TIMESTAMP_LTZ (timestamp with local time zone)  TO_TIMESTAMP_NTZ (timestamp with no time zone)  TO_TIMESTAMP_TZ (timestamp with time zone)",
      "content": "timestampFunction ( <string_expr> [ , <format> ] )\r\n\r\ntimestampFunction ( <numeric_expr> [ , <scale> ] )\r\n\r\ntimestampFunction ( <date_expr> )\r\n\r\ntimestampFunction ( <timestamp_expr> )\r\n\r\ntimestampFunction ( <variant_expr> )\r\nWhere:\r\n\r\ntimestampFunction ::=\r\n    TO_TIMESTAMP | TO_TIMESTAMP_LTZ | TO_TIMESTAMP_NTZ | TO_TIMESTAMP_TZ",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/IS_NULL_VALUE",
      "id": "5aeabfc5-9f54-4184-ae6a-6edb4c564859",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "IS_NULL_VALUE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns true if its VARIANT argument is a JSON null value.",
      "content": "IS_NULL_VALUE( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/COVAR_POP",
      "id": "5c1759d3-0780-4582-a387-64d2e781a968",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "COVAR_POP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the population covariance for non-null pairs in a group. It is computed for non-null pairs using the following formula:  (SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / COUNT(*)  Where x is the independent variable and y is the dependent variable.",
      "content": "COVAR_POP( y , x ) OVER ( [ PARTITION BY <expr1> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/PERCENTILE_DISC",
      "id": "5c676d25-5ebb-406a-a85a-87abc90af36e",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "PERCENTILE_DISC",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a percentile value based on a discrete distribution of the input column (specified in order_by_expr). The returned value is that whose row has the smallest CUME_DIST value that is greater than or equal to the given percentile. NULL values are ignored in the calculation.",
      "content": "PERCENTILE_DISC( <percentile> ) WITHIN GROUP (ORDER BY <order_by_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/ACOS",
      "id": "5d2c63e9-07eb-4b9b-83df-27c014f43960",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "ACOS",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the inverse cosine (arc cosine) of its input; the result is a number in the interval [-pi, pi].",
      "content": "ACOS( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/JSON & XML Parsing",
      "id": "5dd856a1-477f-4b43-9935-0ee0dc3e0593",
      "parent_folder_id": "ee86e399-6f11-4483-bdee-33b498a53753",
      "name": "JSON & XML Parsing",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Exponent & Root",
      "id": "5e2ca68b-b7dd-4508-beb0-a3520d531010",
      "parent_folder_id": "335f4fbe-d97c-42c0-9e16-99655156a8e1",
      "name": "Exponent & Root",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Data Generation Functions/Controlled Distribution/SEQ1 , SEQ2 , SEQ4 , SEQ8",
      "id": "5e51e5b8-4f22-42ab-a402-a66c0d34c4c4",
      "parent_folder_id": "35160c38-8f4a-414d-b9cb-42dc9323a0bb",
      "name": "SEQ1 , SEQ2 , SEQ4 , SEQ8",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a sequence of monotonically increasing integers, with wrap-around. Wrap-around occurs after the largest representable integer of the integer width (1, 2, 4, or 8 byte).",
      "content": "SEQ1( [0|1] )\r\n\r\nSEQ2( [0|1] )\r\n\r\nSEQ4( [0|1] )\r\n\r\nSEQ8( [0|1] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions",
      "id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "parent_folder_id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "name": "Conditional Expression Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Hash (Non-cryptographic)/HASH",
      "id": "5ebb07bd-34b2-4894-8f8c-995e474b3253",
      "parent_folder_id": "85e9a5e0-5801-41b4-9afc-8550d2b50e83",
      "name": "HASH",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a signed 64-bit hash value. Note that HASH never returns NULL, even for NULL inputs.",
      "content": "HASH( <expr> [ , <expr2> ... ] )\r\n\r\nHASH(*)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAY_TO_STRING",
      "id": "5ed4d08d-8c66-4903-9a9e-5286ecef05d1",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAY_TO_STRING",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an input array converted to a string by casting all values to strings (using TO_VARCHAR) and concatenating them (using the string from the second argument to separate the elements).",
      "content": "ARRAY_TO_STRING( <array> , <separator_string> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/MIN , MAX",
      "id": "5feae613-b114-47ba-bed5-729c3d1fff7b",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "MIN , MAX",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the minimum or maximum value for the records within expr. NULL values are ignored unless all the records are NULL, in which case a NULL value is returned.",
      "content": "MAX( <expr> ) [ OVER ( [ PARTITION BY <expr1> ] [ ORDER BY <expr2> [ <window_frame> ] ] ) ]\r\nMIN( <expr> ) [ OVER ( [ PARTITION BY <expr1> ] [ ORDER BY <expr2> [ <window_frame> ] ] ) ]",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/VAR_SAMP",
      "id": "6042033d-9f08-4c13-b79b-fa422f7863f4",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "VAR_SAMP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sample variance of non-NULL records in a group. If all records inside a group are NULL, a NULL is returned.",
      "content": "VAR_SAMP( <expr1> ) OVER (\r\n                         [ PARTITION BY <expr2> ]\r\n                         [ ORDER BY <expr3> [ ASC | DESC ] [ <window_frame> ] ]\r\n                         )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Linear Regression/REGR_AVGX",
      "id": "60ac457c-da00-4dbd-a231-386d780dfb46",
      "parent_folder_id": "b34304e2-db34-48cf-b339-214d4fc2b71b",
      "name": "REGR_AVGX",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the average of the independent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.",
      "content": "REGR_AVGX(y, x) OVER ( [ PARTITION BY <expr3> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/_README",
      "id": "60e8518a-d58a-45a2-a299-94d0bd6d72aa",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "_README",
      "entity_type": "SQL_ENTITY",
      "description": "",
      "content": "Syntax\r\nSELECT ...\r\n  FROM [ <input_table> [ [AS] <alias_1> ] ,\r\n         [ LATERAL ]\r\n       ]\r\n       TABLE( <table_function>( [ <arg_1> [, ... ] ] ) ) [ [ AS ] <alias_2> ];\r\nFor function-specific syntax, see the documentation for the individual system-defined table functions.\r\n\r\nUsage Notes\r\nTable functions can also be applied to a set of rows using the LATERAL construct.\r\n\r\nTo enable using table expressions, Snowflake supports ANSI/ISO standard syntax for table expressions in the FROM clause of queries and subqueries. This syntax is used to indicate that an expression returns a collection of rows instead of a single row.\r\n\r\nThis ANSI/ISO syntax is valid only in the FROM clause of the SELECT list. You cannot omit these keywords and parentheses from a collection subquery specification in any other context.",
      "type": "OTHER",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/LENGTH",
      "id": "60f96357-2577-4354-8e20-aac65971d3fd",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "LENGTH",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the length of a input string or binary value. For strings, the length is the number of characters, and UTF-8 characters are counted as a single character. For binary, the length is the number of bytes.",
      "content": "LENGTH(expr)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/EXTERNAL_TABLE_FILE_REGISTRATION_HISTORY",
      "id": "61561006-ea83-403e-b564-d0fa8489968f",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "EXTERNAL_TABLE_FILE_REGISTRATION_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "This table function can be used to query information about the metadata history for an external table, including:  Files added or removed automatically as part of a metadata refresh.  Any errors found when refreshing the metadata.",
      "content": "EXTERNAL_TABLE_FILE_REGISTRATION_HISTORY (\r\n      TABLE_NAME => '<string>'\r\n      [, START_TIME => <constant_expr> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/AS_<object_type>/AS_TIME",
      "id": "6178f06c-3f71-4561-a0fb-3a637fcd4a06",
      "parent_folder_id": "48876c3a-68ff-4922-afd0-99dfaa4624cd",
      "name": "AS_TIME",
      "entity_type": "SQL_ENTITY",
      "description": "Casts a VARIANT value to a time value. Does not convert from timestamps.",
      "content": "AS_TIME( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Bitwise Aggregation",
      "id": "6238bea1-d58f-46d2-a484-024bd53cb4f3",
      "parent_folder_id": "abf8186d-0346-4582-a27f-871904d4bee2",
      "name": "Bitwise Aggregation",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Extraction",
      "id": "62449bd1-1a27-436a-bc28-c80445d53b14",
      "parent_folder_id": "4a7ef3e8-5d01-4e1f-b360-ec1c49c90320",
      "name": "Extraction",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Boolean Aggregation/BOOLXOR_AGG",
      "id": "6265e252-e7a2-4e72-bacc-d1681146b33a",
      "parent_folder_id": "3db94cb8-8831-41b6-84f5-2242a3f45266",
      "name": "BOOLXOR_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the logical (boolean) XOR value of all non-NULL boolean records in a group.  BOOLXOR_AGG returns TRUE if and only if exactly one record in the group evaluates to TRUE. This differs from a cumulative XOR on the records.  If all records inside the group are NULL, or if the group is empty, the function returns NULL.",
      "content": "BOOLXOR_AGG( <expr> ) OVER ( [ PARTITION BY <partition_expr> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Truncation/TRUNC",
      "id": "62e29388-54ca-4063-a11a-424fd1bce698",
      "parent_folder_id": "5731b996-7309-4f9b-9dd3-32954fd4098f",
      "name": "TRUNC",
      "entity_type": "SQL_ENTITY",
      "description": "Truncates a date, time, or timestamp to the specified part. For example, truncating a timestamp down to the quarter returns the timestamp corresponding to midnight of the first day of the original timestamp’s quarter.  Provides alternative syntax for DATE_TRUNC (reverses the two arguments).",
      "content": "TRUNC( <date_or_time_expr>, <date_or_time_part> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Collation",
      "id": "6404aec8-7c86-44ee-b074-f016b818db1e",
      "parent_folder_id": "eb0a11a4-3341-43fe-af67-874f77b81187",
      "name": "Collation",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/General Context/CURRENT_VERSION",
      "id": "64332d45-c132-4d89-b5dc-4cc2d25d6981",
      "parent_folder_id": "36ae0251-1bcc-4e7b-8fe5-e083565069d8",
      "name": "CURRENT_VERSION",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the current Snowflake version.",
      "content": "CURRENT_VERSION()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Semi-structured Data Types/TO_OBJECT",
      "id": "656d8ae8-b224-46f2-8045-79a41b6582a5",
      "parent_folder_id": "750a5efc-98e9-4499-8f24-2b8d3f011e7e",
      "name": "TO_OBJECT",
      "entity_type": "SQL_ENTITY",
      "description": "Converts the input value to an object:  For a variant value containing an object, returns this object (in a value of type OBJECT).  For a variant value containing JSON null or for NULL input, returns NULL.  For all other input values, reports an error.",
      "content": "TO_OBJECT( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Rank-related",
      "id": "65dd50ca-a8ef-4ec2-85b0-fd1202f8109a",
      "parent_folder_id": "abf8186d-0346-4582-a27f-871904d4bee2",
      "name": "Rank-related",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Conversion/TO_DATE",
      "id": "65e374a2-8541-40fb-b5b0-b234d3e37e88",
      "parent_folder_id": "e4d0270c-a448-41ae-8887-adf78ec1a418",
      "name": "TO_DATE",
      "entity_type": "SQL_ENTITY",
      "description": "Converts an input expression to a date:  For a string expression, the result of converting the string to a date.  For a timestamp expression, the date from the timestamp.  For a variant expression:  If the variant contains a string, a string conversion is performed.  If the variant contains a date, the date value is preserved as is.  If the variant contains a JSON null value, the output is NULL.  For NULL input, the output is NULL.  For all other values, a conversion error is generated.",
      "content": "TO_DATE( <string_expr> [, <format> ] )\r\nTO_DATE( <timestamp_expr> )\r\nTO_DATE( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/IS_<object_type>/IS_CHAR , IS_VARCHAR",
      "id": "66515343-acfd-4524-811b-c8d0ad54f67f",
      "parent_folder_id": "d57aac71-2f6f-4994-88ba-95be21d9f5f1",
      "name": "IS_CHAR , IS_VARCHAR",
      "entity_type": "SQL_ENTITY",
      "description": "Returns TRUE if its VARIANT argument contains a string value.  These functions are synonymous.",
      "content": "IS_CHAR( <variant_expr> )\r\n\r\nIS_VARCHAR( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Addition/Subtraction/DATEADD",
      "id": "66a9c223-8ed9-4cd2-9c8d-0843850cce29",
      "parent_folder_id": "8054e425-6b8c-49a9-a2de-46df896295d8",
      "name": "DATEADD",
      "entity_type": "SQL_ENTITY",
      "description": "Adds the specified value for the specified date or time part to a date, time, or timestamp.",
      "content": "DATEADD( <date_or_time_part>, <value>, <date_or_time_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/AS_<object_type>/AS_DECIMAL , AS_NUMBER",
      "id": "6725f4c7-d7eb-45ea-bbd7-9ecc5da96438",
      "parent_folder_id": "48876c3a-68ff-4922-afd0-99dfaa4624cd",
      "name": "AS_DECIMAL , AS_NUMBER",
      "entity_type": "SQL_ENTITY",
      "description": "Casts a VARIANT value to a fixed-point decimal (does not match floating-point values), with optional precision and scale.  AS_NUMBER is a synonym for AS_DECIMAL.",
      "content": "AS_DECIMAL( <variant_expr> [ , <precision> [ , <scale> ] ] )\r\n\r\nAS_NUMBER( <variant_expr> [ , <precision> [ , <scale> ] ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Text/Character/Binary Data Types/TO_BINARY",
      "id": "6917c252-2d95-456b-bd4f-8ff2d85c9af3",
      "parent_folder_id": "e1cc2707-c813-4249-8b67-665f06e2f5f7",
      "name": "TO_BINARY",
      "entity_type": "SQL_ENTITY",
      "description": "Converts the input expression to a binary value. For NULL input, the output is NULL.",
      "content": "TO_BINARY( <string_expr> [, '<format>'] )\r\nTO_BINARY( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Extraction/NEXT_DAY",
      "id": "6917d689-c46f-4586-a4a2-ce0e31e59ff9",
      "parent_folder_id": "62449bd1-1a27-436a-bc28-c80445d53b14",
      "name": "NEXT_DAY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the date of the first specified DOW (day of week) that occurs after the input date.",
      "content": "NEXT_DAY( <date_or_time_expr> , <dow_string> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Linear Regression/REGR_SXX",
      "id": "69f9573f-4dcd-4929-b0e4-de457f7d23c5",
      "parent_folder_id": "b34304e2-db34-48cf-b339-214d4fc2b71b",
      "name": "REGR_SXX",
      "entity_type": "SQL_ENTITY",
      "description": "Returns REGR_COUNT(y, x) * VAR_POP(x) for non-null pairs.",
      "content": "REGR_SXX(y, x) OVER ( [ PARTITION BY <expr3> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/IFNULL",
      "id": "6a13b032-140d-4ffb-bc57-a7de3f9e10da",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "IFNULL",
      "entity_type": "SQL_ENTITY",
      "description": "If expr1 is NULL, returns expr2, otherwise returns expr1.",
      "content": "IFNULL( <expr1> , <expr2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Regular Expression Matching/REGEXP_REPLACE",
      "id": "6a832d0b-4b98-430f-9866-a4a934bad1dc",
      "parent_folder_id": "8612cd4d-0c28-4e14-9735-673c6c7c0fe3",
      "name": "REGEXP_REPLACE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the subject with the specified pattern (or all occurrences of the pattern) either removed or replaced by a replacement string. If no matches are found, returns the original subject.",
      "content": "REGEXP_REPLACE( <subject> , <pattern> [ , <replacement> , <position> , <occurrence> , <parameters> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/RPAD",
      "id": "6a85dacd-d05d-4238-81ac-9dc989408f96",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "RPAD",
      "entity_type": "SQL_ENTITY",
      "description": "Right-pads a string with characters from another string, or right-pads a binary value with bytes from another binary value.  The argument (base) is padded to length length_expr with characters/bytes from the pad argument.",
      "content": "RPAD(<base>, <length_expr> [, <pad>])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/QUERY_HISTORY , QUERY_HISTORY_BY_*",
      "id": "6aa7c647-4fca-43a5-ae9e-6bd32779dd71",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "QUERY_HISTORY , QUERY_HISTORY_BY_*",
      "entity_type": "SQL_ENTITY",
      "description": "The QUERY_HISTORY family of table functions can be used to query Snowflake query history along various dimensions:  QUERY_HISTORY returns queries within a specified time range.  QUERY_HISTORY_BY_SESSION returns queries within a specified session and time range.  QUERY_HISTORY_BY_USER returns queries submitted by a specified user within a specified time range.  QUERY_HISTORY_BY_WAREHOUSE returns queries executed by a specified warehouse within a specified time range.  Each function is optimized for querying along the specified dimension. The results can be further filtered using SQL predicates.",
      "content": "QUERY_HISTORY(\r\n      [ END_TIME_RANGE_START => <constant_expr> ]\r\n      [, END_TIME_RANGE_END => <constant_expr> ]\r\n      [, RESULT_LIMIT => <num> ] )\r\n\r\nQUERY_HISTORY_BY_SESSION(\r\n      [ SESSION_ID => <constant_expr> ]\r\n      [, END_TIME_RANGE_START => <constant_expr> ]\r\n      [, END_TIME_RANGE_END => <constant_expr> ]\r\n      [, RESULT_LIMIT => <num> ] )\r\n\r\nQUERY_HISTORY_BY_USER(\r\n      [ USER_NAME => '<string>' ]\r\n      [, END_TIME_RANGE_START => <constant_expr> ]\r\n      [, END_TIME_RANGE_END => <constant_expr> ]\r\n      [, RESULT_LIMIT => <num> ] )\r\n\r\nQUERY_HISTORY_BY_WAREHOUSE(\r\n      [ WAREHOUSE_NAME => '<string>' ]\r\n      [, END_TIME_RANGE_START => <constant_expr> ]\r\n      [, END_TIME_RANGE_END => <constant_expr> ]\r\n      [, RESULT_LIMIT => <num> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Addition/Subtraction/TIMESTAMPADD",
      "id": "6cfa9079-c776-4123-840b-6b660a3e1625",
      "parent_folder_id": "8054e425-6b8c-49a9-a2de-46df896295d8",
      "name": "TIMESTAMPADD",
      "entity_type": "SQL_ENTITY",
      "description": "Adds the specified value for the specified date or time part to a date, time, or timestamp.  Alias for DATEADD.",
      "content": "TIMESTAMPADD( <date_or_time_part> , <time_value> , <date_or_time_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/TO_ARRAY",
      "id": "6d54febc-a60f-4022-a028-09500796f42c",
      "parent_folder_id": "b0bbb22b-c561-4f62-a8b2-e3fc078023d5",
      "name": "TO_ARRAY",
      "entity_type": "SQL_ENTITY",
      "description": "Converts the input expression into an array:  If the input is an ARRAY, or VARIANT containing an array value, the result is unchanged.  For NULL or a JSON null input, returns NULL.  For any other value, the result is a single-element array containing this value.",
      "content": "TO_ARRAY( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/SPACE",
      "id": "6d7bde8a-f407-4b59-8b1d-46e08f57d842",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "SPACE",
      "entity_type": "SQL_ENTITY",
      "description": "Builds a string consisting of the specified number of blank spaces.",
      "content": "SPACE(<n>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Extraction/GET_IGNORE_CASE",
      "id": "6d8b233c-6165-42e8-b918-04cd7bfcfecb",
      "parent_folder_id": "f3987910-66c2-49ad-a80f-63146c591214",
      "name": "GET_IGNORE_CASE",
      "entity_type": "SQL_ENTITY",
      "description": "Extracts a field value from an object; returns NULL if either of the arguments is NULL.",
      "content": "GET_IGNORE_CASE( <obj> , <field_name> )\r\n\r\nGET_IGNORE_CASE( <v> , <field_name> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Date & Time Data Types",
      "id": "6e41e97a-a871-4e06-a5d6-8043e830a4ae",
      "parent_folder_id": "f7d813f4-6491-48b4-a1a8-105b410e1a51",
      "name": "Date & Time Data Types",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/AVG",
      "id": "6e7233f3-4bcd-4181-9fff-c873041ef6f6",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "AVG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the average of non-NULL records. If all records inside a group are NULL, the function returns NULL.",
      "content": "AVG( <expr1> ) OVER ( [ PARTITION BY <expr2> ] [ ORDER BY <expr3> [ ASC | DESC ] [ <window_frame> ] ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/STDDEV_SAMP",
      "id": "6e91c747-807e-4f2a-8f75-a2af68e7a199",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "STDDEV_SAMP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sample standard deviation (square root of sample variance) of non-NULL values. If all records inside a group are NULL, returns NULL.",
      "content": "STDDEV_SAMP([DISTINCT] <expr1> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/REPEAT",
      "id": "6ee66abb-130f-4aef-b756-2b60d86162a7",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "REPEAT",
      "entity_type": "SQL_ENTITY",
      "description": "Builds a string by repeating the input for the specified number of times.",
      "content": "REPEAT(<input>, <n>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/DATABASE_REFRESH_PROGRESS , DATABASE_REFRESH_PROGRESS_BY_JOB",
      "id": "6f103fda-87e2-464f-8c9f-8a1e8c382012",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "DATABASE_REFRESH_PROGRESS , DATABASE_REFRESH_PROGRESS_BY_JOB",
      "entity_type": "SQL_ENTITY",
      "description": "The DATABASE_REFRESH_PROGRESS family of functions can be used to query the status of a database refresh along various dimensions:  DATABASE_REFRESH_PROGRESS returns a JSON object indicating the current refresh status for a global secondary database by name.  DATABASE_REFRESH_PROGRESS_BY_JOB returns a JSON object indicating the current refresh status for a global secondary database by refresh query.  Each function is optimized for querying along the specified dimension.",
      "content": "DATABASE_REFRESH_PROGRESS( '<secondary_db_name>' )\r\n\r\nDATABASE_REFRESH_PROGRESS_BY_JOB( '<query_id>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/MODE",
      "id": "6f234707-c3d0-4276-892b-5ad9cbbb7f93",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "MODE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the most frequent value for the values within expr1. NULL values are ignored. If all the values are NULL, or there are 0 rows, then the function returns NULL.",
      "content": "MODE( <expr1> ) OVER ( [ PARTITION BY <expr2> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/BOOLNOT",
      "id": "6f378d98-ea78-45cf-8411-caf17f63a055",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "BOOLNOT",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the Boolean NOT of a single numeric expression. In accordance with Boolean semantics:  Non-zero values (including negative numbers) are regarded as True.  Zero values are regarded as False.",
      "content": "BOOLNOT( expr )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/LEFT",
      "id": "70722574-42f3-40a8-a8a5-bf3d12d56063",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "LEFT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a leftmost substring of its input. LEFT(STR,N) is equivalent to SUBSTR(STR,1,N).",
      "content": "LEFT( <string_expr> , <length_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/CHR , CHAR",
      "id": "7198be5d-d002-466c-9e9e-7c2a097ec46c",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "CHR , CHAR",
      "entity_type": "SQL_ENTITY",
      "description": "Converts a Unicode code point (including 7-bit ASCII) into the character that matches the input Unicode. If an invalid code point is specified, an error is returned.  CHAR is an alias for CHR.",
      "content": "CHR( <input> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Semi-structured Data Aggregation/OBJECT_AGG",
      "id": "71bc4723-953b-4709-a6a2-1c1ec9d74902",
      "parent_folder_id": "17728ca8-58ed-4cfc-b7c0-5428a823263c",
      "name": "OBJECT_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns one OBJECT per group. For each (key, value) input pair, where key must be a VARCHAR and value must be a VARIANT, the resulting OBJECT contains a key:value field.",
      "content": "OBJECT_AGG(<key>, <value>)\r\n    OVER ( [ PARTITION BY <expr2> ] )\r\n    [ WITHIN GROUP ( <orderby_clause> ) ]",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Data Generation Functions/Random/RANDOM",
      "id": "7247ed0e-4c3e-4433-aeed-481becdee71f",
      "parent_folder_id": "d5803490-021e-4e48-8955-3c3e770ea146",
      "name": "RANDOM",
      "entity_type": "SQL_ENTITY",
      "description": "Each call returns a pseudo-random 64-bit integer.",
      "content": "RANDOM([seed])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Time Zone/CONVERT_TIMEZONE",
      "id": "724cb87d-824d-4145-8a72-274036590a6b",
      "parent_folder_id": "8255e6df-58e2-4837-b496-74885f1166ea",
      "name": "CONVERT_TIMEZONE",
      "entity_type": "SQL_ENTITY",
      "description": "Converts a timestamp to another time zone.",
      "content": "CONVERT_TIMEZONE( <source_tz> , <target_tz> , <source_timestamp_ntz> )\r\n\r\nCONVERT_TIMEZONE( <target_tz> , <source_timestamp> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/STRTOK_TO_ARRAY",
      "id": "72db746f-fd79-4fe0-974c-8cdf3b470cdb",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "STRTOK_TO_ARRAY",
      "entity_type": "SQL_ENTITY",
      "description": "Tokenizes the given string using the given set of delimiters and returns the tokens as an array.  If either parameter is a NULL, a NULL is returned. An empty array is returned if tokenization produces no tokens.",
      "content": "STRTOK_TO_ARRAY(<string> [,<delimiter>])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAY_APPEND",
      "id": "736031d2-c5f7-4bc8-ae07-9c9e0fc19f5e",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAY_APPEND",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an array containing all elements from the source array as well as the new element. The new element is located at end of the array.",
      "content": "ARRAY_APPEND( <array> , <new_element> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/INSERT",
      "id": "74c663bc-bdd3-4d91-ba8f-f72635821c3d",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "INSERT",
      "entity_type": "SQL_ENTITY",
      "description": "Replaces a substring of the specified length, starting at the specified position, with a new string or binary value.  This function should not be confused with the INSERT DML command.",
      "content": "INSERT( <base_expr>, <pos>, <len>, <insert_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Semi-structured Data Types",
      "id": "750a5efc-98e9-4499-8f24-2b8d3f011e7e",
      "parent_folder_id": "f7d813f4-6491-48b4-a1a8-105b410e1a51",
      "name": "Semi-structured Data Types",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Statistics and Probability/KURTOSIS",
      "id": "75711fa1-6deb-43aa-b933-fd0682ec6065",
      "parent_folder_id": "4b9e8234-9de0-470d-8a70-5fb7f1ca7225",
      "name": "KURTOSIS",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the population excess kurtosis of non-NULL records. If all records inside a group are NULL, the function returns NULL.  The following formula is used to compute the population excess kurtosis:  (n * (n+1))/((n-1) * (n-2) * (n-3)) * (n * m_4/(k_2)^2) - 3 * (n-1)^2 / ((n-2) * (n-3))  where:  n denotes the number of non null records.  m_4 denotes the sample fourth central moment.  k_2 denotes the symmetric unbiased estimator of the variance.",
      "content": "KURTOSIS( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/AS_<object_type>/AS_INTEGER",
      "id": "76f6ab19-494e-4970-a8b5-eb2a45a9398a",
      "parent_folder_id": "48876c3a-68ff-4922-afd0-99dfaa4624cd",
      "name": "AS_INTEGER",
      "entity_type": "SQL_ENTITY",
      "description": "Casts a VARIANT value to an integer. Does not match non-integer values.",
      "content": "AS_INTEGER( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Boolean Aggregation/BOOLAND_AGG",
      "id": "780c6870-68c7-49b3-8b32-dc5b86d2975d",
      "parent_folder_id": "cba52012-ef90-460a-a1e6-707a473a0b0e",
      "name": "BOOLAND_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the logical (boolean) AND value of all non-NULL boolean records in a group.  BOOLAND_AGG returns TRUE if and only if all records in the group evaluate to TRUE.  If all records inside the group are NULL, or if the group is empty, the function returns NULL.",
      "content": "BOOLAND_AGG( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/RTRIM",
      "id": "78790002-aada-4c18-bc9b-e059a49b2618",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "RTRIM",
      "entity_type": "SQL_ENTITY",
      "description": "Removes trailing characters, including whitespace, from a string.",
      "content": "RTRIM(<expr> [, <characters> ])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/IS_<object_type>/IS_TIMESTAMP_*",
      "id": "78b45ed5-d90a-4793-a6d7-21c041511180",
      "parent_folder_id": "d57aac71-2f6f-4994-88ba-95be21d9f5f1",
      "name": "IS_TIMESTAMP_*",
      "entity_type": "SQL_ENTITY",
      "description": "Verifies whether a VARIANT value contains the respective TIMESTAMP value:  IS_TIMESTAMP_LTZ (value with local time zone).  IS_TIMESTAMP_NTZ (value with no time zone).  IS_TIMESTAMP_TZ (value with time zone).",
      "content": "IS_TIMESTAMP_LTZ( <variant_expr> )\r\n\r\nIS_TIMESTAMP_NTZ( <variant_expr> )\r\n\r\nIS_TIMESTAMP_TZ( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/TRIM",
      "id": "78ebb4af-336a-43ca-ba47-5a6881e788c4",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "TRIM",
      "entity_type": "SQL_ENTITY",
      "description": "Removes leading and trailing characters from a string.",
      "content": "TRIM( <expr> [, <characters> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/ASINH",
      "id": "793fd473-dc43-4447-b61c-c0ed55f1defa",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "ASINH",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the inverse (arc) hyperbolic sine of its argument.",
      "content": "ASINH( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Hash/HASH_AGG",
      "id": "7aa0b998-0104-4278-97b3-3fb105e81611",
      "parent_folder_id": "f4c66af5-134a-4d31-998e-25aaf0a3ffab",
      "name": "HASH_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an aggregate signed 64-bit hash value over the (unordered) set of input rows. HASH_AGG never returns NULL, even if no input is provided. Empty input “hashes” to 0.  One use for aggregate hash functions is to detect changes to a set of values without comparing the individual old and new values. HASH_AGG can compute a single hash value based on many inputs; almost any change to one of the inputs is likely to result in a change to the output of the HASH_AGG function. Comparing two lists of values typically requires sorting both lists, but HASH_AGG produces the same value regardless of the order of the inputs. Because the values don’t need to be sorted for HASH_AGG, performance is typically much faster.",
      "content": "HASH_AGG( [ DISTINCT ] <expr> [ , <expr2> ... ] )\r\n\r\nHASH_AGG(*)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/JSON and XML Parsing/PARSE_XML",
      "id": "7b084ff1-6af2-49d9-805d-05791ae0303f",
      "parent_folder_id": "5dd856a1-477f-4b43-9935-0ee0dc3e0593",
      "name": "PARSE_XML",
      "entity_type": "SQL_ENTITY",
      "description": "Interprets an input string as an XML document, producing an OBJECT value. If the input is NULL, the output is NULL.",
      "content": "create table xtab (v object);\r\n\r\ninsert into xtab select parse_xml(column1) as v\r\n  from values ('<a/>'), ('<a attr=\"123\">text</a>'), ('<a><b>X</b><b>Y</b></a>');\r\n\r\nselect * from xtab;",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/IS_<object_type>/IS_BOOLEAN",
      "id": "7b1e4066-e25c-4b95-849d-6b20c655f90c",
      "parent_folder_id": "d57aac71-2f6f-4994-88ba-95be21d9f5f1",
      "name": "IS_BOOLEAN",
      "entity_type": "SQL_ENTITY",
      "description": "Returns TRUE if its VARIANT argument contains a Boolean value.",
      "content": "IS_BOOLEAN( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Case Conversion/LOWER",
      "id": "7bc2df94-ef46-4119-bc2e-694aaabf936f",
      "parent_folder_id": "c761a251-9d15-4a37-afd5-e0b5df1b3d17",
      "name": "LOWER",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the input string (expr) with all characters converted to lowercase.",
      "content": "LOWER( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/LEAST",
      "id": "7c15d423-ae11-4a55-af54-c0d13fb26c41",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "LEAST",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the smallest value from a list of expressions. LEAST supports all data types, including VARIANT.",
      "content": "LEAST( <expr> , ... )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/REPLACE",
      "id": "7d1ea0d7-b3f6-4cb6-9b5d-ed91343ca164",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "REPLACE",
      "entity_type": "SQL_ENTITY",
      "description": "Removes all occurrences of a specified substring, and optionally replaces them with another string.",
      "content": "REPLACE( <subject> , <pattern> [ , <replacement> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Control/SYSTEM$WAIT",
      "id": "7f1f2c2d-f3bc-4c8b-afb7-dafcea0c3b12",
      "parent_folder_id": "ee9e8013-0ca8-4768-8939-0ea70dbc892f",
      "name": "SYSTEM$WAIT",
      "entity_type": "SQL_ENTITY",
      "description": "Waits for the specified amount of time before proceeding.",
      "content": "SYSTEM$WAIT( amount [ , time_unit ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/LOGIN_HISTORY , LOGIN_HISTORY_BY_USER",
      "id": "7f55786f-5df6-40ce-8e8b-9e1b94acb6ee",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "LOGIN_HISTORY , LOGIN_HISTORY_BY_USER",
      "entity_type": "SQL_ENTITY",
      "description": "The LOGIN_HISTORY family of table functions can be used to query login attempts by Snowflake users along various dimensions:  LOGIN_HISTORY returns login events within a specified time range.  LOGIN_HISTORY_BY_USER returns login events of a specified user within a specified time range.  Each function is optimized for querying along the specified dimension. The results can be further filtered using SQL predicates.",
      "content": "LOGIN_HISTORY(\r\n      [  TIME_RANGE_START => <constant_expr> ]\r\n      [, TIME_RANGE_END => <constant_expr> ]\r\n      [, RESULT_LIMIT => <num> ] )\r\n\r\nLOGIN_HISTORY_BY_USER(\r\n      [  USER_NAME => '<string>' ]\r\n      [, TIME_RANGE_START => <constant_expr> ]\r\n      [, TIME_RANGE_END => <constant_expr> ]\r\n      [, RESULT_LIMIT => <num> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Control/SYSTEM$TASK_DEPENDENTS_ENABLE",
      "id": "7fdcde2f-1969-45d0-8295-2d3b5293c4e9",
      "parent_folder_id": "ee9e8013-0ca8-4768-8939-0ea70dbc892f",
      "name": "SYSTEM$TASK_DEPENDENTS_ENABLE",
      "entity_type": "SQL_ENTITY",
      "description": "Recursively enables all dependent tasks tied to a specified root task. This function allows the owner of a simple tree of tasks (i.e. the role with the OWNERSHIP privilege on the tasks) to enable the tasks by executing a single SQL statement rather than enabling each task individually (using ALTER TASK … RESUME).",
      "content": "SYSTEM$TASK_DEPENDENTS_ENABLE( '<root_task_name>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Addition & Subtraction",
      "id": "8054e425-6b8c-49a9-a2de-46df896295d8",
      "parent_folder_id": "4a7ef3e8-5d01-4e1f-b360-ec1c49c90320",
      "name": "Addition & Subtraction",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/SINH",
      "id": "806ec1d6-9aef-41ee-a14b-0b878cb2b6b9",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "SINH",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the hyperbolic sine of its argument.",
      "content": "SINH( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/CORR",
      "id": "80ffd5d2-51b5-429c-b0d2-b349fd425d69",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "CORR",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the correlation coefficient for non-null pairs in a group. It is computed for non-null pairs using the following formula:  COVAR_POP(y, x) / (STDDEV_POP(x) * STDDEV_POP(y))  Where x is the independent variable and y is the dependent variable.",
      "content": "CORR( y , x )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/General Context/LOCALTIMESTAMP",
      "id": "824b9ffc-27ae-4e4e-9ab8-958065566702",
      "parent_folder_id": "36ae0251-1bcc-4e7b-8fe5-e083565069d8",
      "name": "LOCALTIMESTAMP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the current timestamp for the system.  ANSI-compliant alias for CURRENT_TIMESTAMP.",
      "content": "LOCALTIMESTAMP()\r\n\r\nLOCALTIMESTAMP",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Time Zone",
      "id": "8255e6df-58e2-4837-b496-74885f1166ea",
      "parent_folder_id": "4a7ef3e8-5d01-4e1f-b360-ec1c49c90320",
      "name": "Time Zone",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Context",
      "id": "825f6234-6811-4d6d-b615-78179c86c6fb",
      "parent_folder_id": "8cdf7bdd-0a1f-4e82-b5be-0fd365e27aad",
      "name": "Session Context",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Regular Expression Matching/REGEXP_INSTR",
      "id": "8263c06a-3167-4605-a84f-be625b24c33e",
      "parent_folder_id": "8612cd4d-0c28-4e14-9735-673c6c7c0fe3",
      "name": "REGEXP_INSTR",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the position of the specified occurrence of the regular expression pattern in the string subject. If no match is found, returns 0.",
      "content": "REGEXP_INSTR( <subject> , <pattern> [ , <position> [ , <occurrence> [ , <option> [ , <regexp_parameters> [ , <group_num> ] ] ] ] ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/AS_<object_type>/AS_CHAR , AS_VARCHAR",
      "id": "83118d02-4778-4267-9d8b-8d80bf99c058",
      "parent_folder_id": "48876c3a-68ff-4922-afd0-99dfaa4624cd",
      "name": "AS_CHAR , AS_VARCHAR",
      "entity_type": "SQL_ENTITY",
      "description": "Casts a VARIANT value to a string. Does not convert values of other types into string.  The AS_CHAR and AS_VARCHAR functions are synonymous.",
      "content": "AS_CHAR( <variant_expr> )\r\n\r\nAS_VARCHAR( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Bitwise Expression Functions/BITAND_AGG",
      "id": "83341234-8b7e-4750-aefa-e05866e53be0",
      "parent_folder_id": "21b07106-8121-442f-a8f4-58f90665d54d",
      "name": "BITAND_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Same as BITAND, but across all numeric records in group a.",
      "content": "BITAND_AGG(a)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation",
      "id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "parent_folder_id": "eb0a11a4-3341-43fe-af67-874f77b81187",
      "name": "General Manipulation",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/NVL2",
      "id": "83be222b-a376-4feb-8ceb-df2a021fcab3",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "NVL2",
      "entity_type": "SQL_ENTITY",
      "description": "Returns values depending on whether the first input is NULL:  If expr1 is NOT NULL, then NVL2 returns expr2.  If expr1 is NULL, then NVL2 returns expr3.",
      "content": "NVL2( <expr1> , <expr2> , <expr3> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/General Context/LOCALTIME",
      "id": "8452d231-dad1-4951-b6c3-637be07a11be",
      "parent_folder_id": "36ae0251-1bcc-4e7b-8fe5-e083565069d8",
      "name": "LOCALTIME",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the current time for the system.  ANSI-compliant alias for CURRENT_TIME.",
      "content": "LOCALTIME()\r\n\r\nLOCALTIME",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/LISTAGG",
      "id": "84c45030-03f9-4752-8e1a-002b6434e00d",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "LISTAGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the concatenated input values, separated by the delimiter string.",
      "content": "LISTAGG( [ DISTINCT ] <expr1> [, <delimiter> ] ) [ WITHIN GROUP ( <orderby_clause> ) ]",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Text/Character/Binary Data Types/TRY_TO_BINARY",
      "id": "85a9a5e7-87ea-49c5-b76a-4217f03ddf4a",
      "parent_folder_id": "e1cc2707-c813-4249-8b67-665f06e2f5f7",
      "name": "TRY_TO_BINARY",
      "entity_type": "SQL_ENTITY",
      "description": "A special version of TO_BINARY that performs the same operation (i.e. converts an input expression to a binary value), but with error handling support (i.e. if the conversion cannot be performed, it returns a NULL value instead of raising an error).",
      "content": "TRY_TO_BINARY( <string_expr> [, '<format>'] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Hash (Non-cryptographic)",
      "id": "85e9a5e0-5801-41b4-9afc-8550d2b50e83",
      "parent_folder_id": "eb0a11a4-3341-43fe-af67-874f77b81187",
      "name": "Hash (Non-cryptographic)",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Regular Expression Matching",
      "id": "8612cd4d-0c28-4e14-9735-673c6c7c0fe3",
      "parent_folder_id": "eb0a11a4-3341-43fe-af67-874f77b81187",
      "name": "Regular Expression Matching",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/RIGHT",
      "id": "8658583b-f294-4f07-88eb-405b42a3ea31",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "RIGHT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a rightmost substring of its input.  RIGHT(STR,N) is equivalent to SUBSTR(STR,LENGTH(STR)-N+1,N).",
      "content": "RIGHT( <string_expr> , <length_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Any Data Type/CAST , ::",
      "id": "865c2f4e-e48b-4600-b4e5-6749fc19e8b8",
      "parent_folder_id": "aa279216-8902-489b-a538-cb69cfa8b75d",
      "name": "CAST , ::",
      "entity_type": "SQL_ENTITY",
      "description": "Converts a value of one data type into another data type. The semantics of CAST are the same as the semantics of the corresponding TO_ datatype conversion functions. If the cast is not possible, an error is raised. For more details, see the individual TO_ datatype conversion functions.  The :: operator provides alternative syntax for CAST.",
      "content": "CAST( <source_expr> AS <target_data_type> )\r\n\r\n<source_expr> :: <target_data_type>",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$GET_PREDECESSOR_RETURN_VALUE",
      "id": "8766f081-2e5c-4d94-b930-4b84bfb55de6",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$GET_PREDECESSOR_RETURN_VALUE",
      "entity_type": "SQL_ENTITY",
      "description": "Retrieves the return value for the predecessor task in a tree of tasks. The return value is explicitly set by the predecessor task by calling the SYSTEM$SET_RETURN_VALUE function.",
      "content": "SYSTEM$GET_PREDECESSOR_RETURN_VALUE()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates",
      "id": "8869dc90-d067-4d98-8f87-1ce865f0725d",
      "parent_folder_id": "ee86e399-6f11-4483-bdee-33b498a53753",
      "name": "Type Predicates",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/VALIDATE_PIPE_LOAD",
      "id": "892914de-ee9f-4edc-90ac-6bf1df521c54",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "VALIDATE_PIPE_LOAD",
      "entity_type": "SQL_ENTITY",
      "description": "This table function can be used to validate data files processed by Snowpipe within a specified time range. The function returns details about any errors encountered during an attempted data load into Snowflake tables.",
      "content": "VALIDATE_PIPE_LOAD(\r\n      PIPE_NAME => '<string>'\r\n       , START_TIME => <constant_expr>\r\n      [, END_TIME => <constant_expr> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Hash/HASH_AGG",
      "id": "8a8402ff-d949-4cc4-ab2f-349c129e1494",
      "parent_folder_id": "bfb6f315-b573-4fc5-bfac-c7252e133b29",
      "name": "HASH_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an aggregate signed 64-bit hash value over the (unordered) set of input rows. HASH_AGG never returns NULL, even if no input is provided. Empty input “hashes” to 0.  One use for aggregate hash functions is to detect changes to a set of values without comparing the individual old and new values. HASH_AGG can compute a single hash value based on many inputs; almost any change to one of the inputs is likely to result in a change to the output of the HASH_AGG function. Comparing two lists of values typically requires sorting both lists, but HASH_AGG produces the same value regardless of the order of the inputs. Because the values don’t need to be sorted for HASH_AGG, performance is typically much faster.",
      "content": "HASH_AGG( [ DISTINCT ] <expr> [ , <expr2> ... ] ) OVER ( [ PARTITION BY <expr3> ] )\r\n\r\nHASH_AGG(*) OVER ( [ PARTITION BY <expr3> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/SPLIT_TO_TABLE",
      "id": "8b4c9177-fe1c-4b52-8727-1e673c394884",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "SPLIT_TO_TABLE",
      "entity_type": "SQL_ENTITY",
      "description": "This table function splits a string (based on a specified delimiter) and flattens the results into rows",
      "content": "SPLIT_TO_TABLE(<string>, <delimiter>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions",
      "id": "8cdf7bdd-0a1f-4e82-b5be-0fd365e27aad",
      "parent_folder_id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "name": "Context Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Encoding/Decoding/TRY_HEX_DECODE_BINARY",
      "id": "8d8a9bc6-2962-4f78-8332-3b931405c8d2",
      "parent_folder_id": "fc4f363e-00a4-4fc8-bc33-839c887fa6d8",
      "name": "TRY_HEX_DECODE_BINARY",
      "entity_type": "SQL_ENTITY",
      "description": "A special version of HEX_DECODE_BINARY that returns a NULL value if an error occurs during decoding.",
      "content": "TRY_HEX_DECODE_BINARY(<input>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions",
      "id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "parent_folder_id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "name": "Table Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Extraction/LAST_DAY",
      "id": "8f988cde-f0cf-4fe3-a20e-0a963a16b402",
      "parent_folder_id": "62449bd1-1a27-436a-bc28-c80445d53b14",
      "name": "LAST_DAY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the last day of the specified date part for a date or timestamp. Commonly used to return the last day of the month for a date or timestamp.",
      "content": "LAST_DAY( <date_or_time_expr> [ , <date_part> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/VAR_POP",
      "id": "90ce2b0d-1e33-4dee-91a7-9c0cf0bf0d52",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "VAR_POP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the population variance of non-NULL records in a group. If all records inside a group are NULL, a NULL is returned.",
      "content": "VAR_POP( <expr1> ) OVER (\r\n                        [ PARTITION BY <expr2> ]\r\n                        [ ORDER BY <expr3> [ ASC | DESC ] [ <window_frame> ] ]\r\n                        )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Linear Regression/REGR_R2",
      "id": "91206841-9b5b-41ee-8e1c-eaf0b8d225f5",
      "parent_folder_id": "a66240bf-3b81-4d25-9731-45531832b657",
      "name": "REGR_R2",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the coefficient of determination for non-null pairs in a group. It is computed for non-null pairs using the following formula:  null                 if var_pop(x) = 0, else 1                    if var_pop(y) = 0 and var_pop(x) <> 0, else power(corr(y,x), 2) Where x is the independent variable and y is the dependent variable.",
      "content": "REGR_R2(y, x)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Linear Regression/REGR_COUNT",
      "id": "913c7630-1b48-4732-b3fd-95269e3f396b",
      "parent_folder_id": "a66240bf-3b81-4d25-9731-45531832b657",
      "name": "REGR_COUNT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the number of non-null number pairs in a group.",
      "content": "REGR_COUNT(y, x)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/RADIANS",
      "id": "93de19c6-5bd0-4c19-a4e5-2f2da961a7c0",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "RADIANS",
      "entity_type": "SQL_ENTITY",
      "description": "Converts degrees to radians.",
      "content": "RADIANS( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Numeric Data Types/TO_DOUBLE",
      "id": "9520adad-ec93-4444-b24d-b354ccfe0c2f",
      "parent_folder_id": "0e00f3e3-a020-4c4e-9469-2714d7556382",
      "name": "TO_DOUBLE",
      "entity_type": "SQL_ENTITY",
      "description": "Converts an expression to a double-precision floating-point number.  For NULL input, the result is NULL.",
      "content": "TO_DOUBLE( <expr> [, '<format>' ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/AS_<object_type>/AS_DOUBLE , AS_REAL",
      "id": "95e9023e-4842-4f8a-876d-adbe2e7366ae",
      "parent_folder_id": "48876c3a-68ff-4922-afd0-99dfaa4624cd",
      "name": "AS_DOUBLE , AS_REAL",
      "entity_type": "SQL_ENTITY",
      "description": "Casts a VARIANT value to a floating-point value.  AS_REAL is a synonym for AS_DOUBLE.",
      "content": "AS_DOUBLE( <variant> )\r\n\r\nAS_REAL( <variant> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/BOOLAND",
      "id": "969b2388-c6cf-4b75-8187-ce7407142fe5",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "BOOLAND",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the Boolean AND of two numeric expressions. In accordance with Boolean semantics:  Non-zero values (including negative numbers) are regarded as True.  Zero values are regarded as False.",
      "content": "BOOLAND( expr1 , expr2 )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Linear Regression/REGR_R2",
      "id": "9820904f-2fd6-4161-8ecd-75c8276e35a6",
      "parent_folder_id": "b34304e2-db34-48cf-b339-214d4fc2b71b",
      "name": "REGR_R2",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the coefficient of determination for non-null pairs in a group. It is computed for non-null pairs using the following formula:  null                 if var_pop(x) = 0, else 1                    if var_pop(y) = 0 and var_pop(x) <> 0, else power(corr(y,x), 2) Where x is the independent variable and y is the dependent variable.",
      "content": "REGR_R2(y, x) OVER ( [ PARTITION BY <expr3> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Control/SYSTEM$PIPE_FORCE_RESUME",
      "id": "98bef13a-d05f-4967-ad55-b64a22aa5f15",
      "parent_folder_id": "ee9e8013-0ca8-4768-8939-0ea70dbc892f",
      "name": "SYSTEM$PIPE_FORCE_RESUME",
      "entity_type": "SQL_ENTITY",
      "description": "Forces a pipe paused using ALTER PIPE to resume. This is necessary if the pipe owner transfers ownership of the pipe to another role while the pipe is paused.  Executing this function resumes the specified pipe. Any files submitted to the pipe while it was paused will start loading into the target table. To determine how many files are queued, query SYSTEM$PIPE_STATUS.",
      "content": "SYSTEM$PIPE_FORCE_RESUME( '<pipe_name>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Regular Expression Matching/RLIKE",
      "id": "98c45896-486c-463c-960b-b25a3c0ccc49",
      "parent_folder_id": "8612cd4d-0c28-4e14-9735-673c6c7c0fe3",
      "name": "RLIKE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns true if the subject matches the specified pattern. Both inputs must be text expressions.  RLIKE is similar to the LIKE function, but with POSIX extended regular expressions instead of SQL LIKE pattern syntax. It supports more complex matching conditions than LIKE.",
      "content": "-- 1st syntax\r\nRLIKE( <subject> , <pattern> [ , <parameters> ] )\r\n\r\n-- 2nd syntax\r\n<subject> RLIKE <pattern>",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Construction/TIME_FROM_PARTS",
      "id": "98ea021c-4c8e-4d12-958c-877cb44eb148",
      "parent_folder_id": "b62be236-8cc0-4a06-8733-aab6550fe3f3",
      "name": "TIME_FROM_PARTS",
      "entity_type": "SQL_ENTITY",
      "description": "Creates a time from individual numeric components.",
      "content": "TIME_FROM_PARTS( <hour>, <minute>, <second> [, <nanoseconds>] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Rank-related/CUME_DIST",
      "id": "99321b79-52bb-4c17-84ac-59de2acfbbae",
      "parent_folder_id": "65dd50ca-a8ef-4ec2-85b0-fd1202f8109a",
      "name": "CUME_DIST",
      "entity_type": "SQL_ENTITY",
      "description": "Finds the cumulative distribution of a value with regard to other values within the same window partition.",
      "content": "CUME_DIST() OVER ( [ PARTITION BY <partition_expr> ] ORDER BY <order_expr>  [ ASC | DESC ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/SPLIT",
      "id": "995db0b5-b127-4ca5-8cec-7be877ccfc8f",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "SPLIT",
      "entity_type": "SQL_ENTITY",
      "description": "Splits a given string with a given separator and returns the result in an array of strings.  Contiguous split strings in the source string, or the presence of a split string at the beginning or end of the source string, results in an empty string in the output. An empty separator string results in an array containing only the source string. If either parameter is a NULL, a NULL is returned.  The result can be used with functions and constructs operating on semi-structured data, e.g. FLATTEN, ARRAY_SIZE.",
      "content": "SPLIT(<string>, <separator>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/DATABASE_REFRESH_HISTORY",
      "id": "9a3b9afe-9a14-480b-a2cb-6eccbffcb7b1",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "DATABASE_REFRESH_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the refresh history for a secondary database.",
      "content": "DATABASE_REFRESH_HISTORY( '<secondary_db_name>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/STRTOK_SPLIT_TO_TABLE",
      "id": "9a4c3f46-8f54-4492-b333-6eaa2d2ec908",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "STRTOK_SPLIT_TO_TABLE",
      "entity_type": "SQL_ENTITY",
      "description": "Tokenizes a string with the given set of delimiters and flattens the results into rows.",
      "content": "STRTOK_TO_SPLIT_TO_TABLE(<string> [,<delimiter_list>])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/General Context/CURRENT_TIMESTAMP",
      "id": "9b3b7509-469c-4e3f-b8ad-98762ce08139",
      "parent_folder_id": "36ae0251-1bcc-4e7b-8fe5-e083565069d8",
      "name": "CURRENT_TIMESTAMP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the current timestamp for the system.",
      "content": "CURRENT_TIMESTAMP( [ <fract_sec_precision> ] )\r\n\r\nCURRENT_TIMESTAMP",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window",
      "id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "parent_folder_id": "abf8186d-0346-4582-a27f-871904d4bee2",
      "name": "General Window",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/REGR_VALX",
      "id": "9cc77760-2b03-4590-b8cb-db53514b1014",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "REGR_VALX",
      "entity_type": "SQL_ENTITY",
      "description": "Returns NULL if the first argument is NULL; otherwise, returns the second argument.  Note that REGR_VALX is a NULL-preserving function, while the more commonly-used NVL is a NULL-replacing function.",
      "content": "REGR_VALY( <y> , <x> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/NULLIF",
      "id": "9ce66d24-b380-4ed8-99dd-4e872abad323",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "NULLIF",
      "entity_type": "SQL_ENTITY",
      "description": "Returns NULL if expr1 is equal to expr2, otherwise returns expr1.",
      "content": "NULLIF( <expr1> , <expr2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/OCTET_LENGTH",
      "id": "9d00bbde-a939-48f6-87eb-5b60c51d2940",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "OCTET_LENGTH",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the length of a string or binary value in bytes. This will be the same as LENGTH for ASCII strings and greater than LENGTH for strings using Unicode code points. For binary, this is always the same as LENGTH.",
      "content": "OCTET_LENGTH(<string_or_binary>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAY_CONSTRUCT",
      "id": "9de765c3-4c57-47db-9183-21c56fd82e15",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAY_CONSTRUCT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an array constructed from zero, one, or more inputs.",
      "content": "ARRAY_CONSTRUCT( [ <expr1> ] [ , <expr2> [ , ... ] ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric",
      "id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "parent_folder_id": "335f4fbe-d97c-42c0-9e16-99655156a8e1",
      "name": "Trigonometric",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Extraction/EXTRACT",
      "id": "9e4496ee-1f59-4265-b49b-e1cca808f239",
      "parent_folder_id": "62449bd1-1a27-436a-bc28-c80445d53b14",
      "name": "EXTRACT",
      "entity_type": "SQL_ENTITY",
      "description": "Extracts the specified date or time part from a date, time, or timestamp.",
      "content": "EXTRACT( <date_or_time_part> FROM <date_or_time_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/MEDIAN",
      "id": "9eabdbd0-9caf-46fd-bca8-f5443fe29877",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "MEDIAN",
      "entity_type": "SQL_ENTITY",
      "description": "Determines the median of a set of values.",
      "content": "MEDIAN( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Rounding and Truncation/SIGN",
      "id": "9eac5eb8-7b55-43ae-b269-55d645f80099",
      "parent_folder_id": "c92cfc54-280e-4dc8-82f8-6599224e4332",
      "name": "SIGN",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sign of its argument:  -1 if the argument is negative.  1 if it is positive.  0 if it is 0.",
      "content": "SIGN( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/GREATEST",
      "id": "a09e5166-bf9b-49d9-b277-db9eeb4b5965",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "GREATEST",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the largest value from a list of expressions. If any of the argument values is NULL, the result is NULL. GREATEST supports all data types, including VARIANT.",
      "content": "GREATEST( <expr1> [ , <expr2> ... ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Numeric Data Types/TRY_TO_DOUBLE",
      "id": "a1beba78-8248-4865-9407-cb06d105b1b5",
      "parent_folder_id": "0e00f3e3-a020-4c4e-9469-2714d7556382",
      "name": "TRY_TO_DOUBLE",
      "entity_type": "SQL_ENTITY",
      "description": "A special version of TO_DOUBLE that performs the same operation (i.e. converts an input expression to a double-precision floating-point number), but with error-handling support (i.e. if the conversion cannot be performed, it returns a NULL value instead of raising an error).",
      "content": "TRY_TO_DOUBLE( <string_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$SET_RETURN_VALUE",
      "id": "a1fd3b7b-4e91-4b3c-9caa-5277d3c56240",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$SET_RETURN_VALUE",
      "entity_type": "SQL_ENTITY",
      "description": "Explicitly sets the return value for a task.  In a tree of tasks, a task can call this function to set a return value. Another task that identifies this task as the predecessor task (using the AFTER keyword in the task definition) can retrieve the return value set by the predecessor task.",
      "content": "SYSTEM$SET_RETURN_VALUE( '<string_expression>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/AS_<object_type>/AS_TIMESTAMP_*",
      "id": "a2df366a-e92d-4d32-8413-bcd0fb1b3579",
      "parent_folder_id": "48876c3a-68ff-4922-afd0-99dfaa4624cd",
      "name": "AS_TIMESTAMP_*",
      "entity_type": "SQL_ENTITY",
      "description": "Casts a VARIANT value to the respective TIMESTAMP value:  AS_TIMESTAMP_LTZ (value with local time zone)  AS_TIMESTAMP_NTZ (value with no time zone)  AS_TIMESTAMP_TZ (value with time zone)",
      "content": "AS_TIMESTAMP_LTZ( <variant_expr> )\r\n\r\nAS_TIMESTAMP_NTZ( <variant_expr> )\r\n\r\nAS_TIMESTAMP_TZ( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/STDDEV",
      "id": "a2e0d735-a841-46cd-a99c-6ca1a4fff585",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "STDDEV",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sample standard deviation (square root of sample variance) of non-NULL values. If all records inside a group are NULL, returns NULL.",
      "content": "STDDEV( [DISTINCT] <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Conversion/TO_TIME",
      "id": "a3eb8628-cbd2-4f39-9a96-c11b02e77948",
      "parent_folder_id": "e4d0270c-a448-41ae-8887-adf78ec1a418",
      "name": "TO_TIME",
      "entity_type": "SQL_ENTITY",
      "description": "Converts an input expression into a time. If input is NULL, returns NULL.",
      "content": "TO_TIME( <string_expr> [, <format> ] )\r\nTO_TIME( <timestamp_expr> )\r\nTO_TIME( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/General Context/CURRENT_REGION",
      "id": "a3ec144b-efa2-450b-8d05-ac49eed48b03",
      "parent_folder_id": "36ae0251-1bcc-4e7b-8fe5-e083565069d8",
      "name": "CURRENT_REGION",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the name of the region for the account where the current user is logged in.",
      "content": "CURRENT_REGION()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Encoding/Decoding/BASE64_DECODE_STRING",
      "id": "a4ca8bcb-f90b-4545-a283-e38c9c9052b9",
      "parent_folder_id": "fc4f363e-00a4-4fc8-bc33-839c887fa6d8",
      "name": "BASE64_DECODE_STRING",
      "entity_type": "SQL_ENTITY",
      "description": "Decodes a Base64-encoded string to a string.",
      "content": "BASE64_DECODE_STRING( <input> [ , <alphabet> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Exponent and Root/EXP",
      "id": "a518f9c6-5be4-4810-9ec0-e5abbdaebfc4",
      "parent_folder_id": "5e2ca68b-b7dd-4508-beb0-a3520d531010",
      "name": "EXP",
      "entity_type": "SQL_ENTITY",
      "description": "Computes Euler’s number e raised to a floating-point value.",
      "content": "EXP( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/JSON and XML Parsing/PARSE_JSON",
      "id": "a5234a0a-43ae-45cc-a624-16fef225ae9f",
      "parent_folder_id": "5dd856a1-477f-4b43-9935-0ee0dc3e0593",
      "name": "PARSE_JSON",
      "entity_type": "SQL_ENTITY",
      "description": "Interprets an input string as a JSON document, producing a VARIANT value.",
      "content": "PARSE_JSON( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Linear Regression/REGR_SXY",
      "id": "a5a66082-5234-4ed9-8af4-a8cca72686d0",
      "parent_folder_id": "a66240bf-3b81-4d25-9731-45531832b657",
      "name": "REGR_SXY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns REGR_COUNT(expr1, expr2) * COVAR_POP(expr1, expr2) for non-null pairs.",
      "content": "REGR_SXY(y, x)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Linear Regression",
      "id": "a66240bf-3b81-4d25-9731-45531832b657",
      "parent_folder_id": "fcfe29fe-a075-43ce-a750-5f0158cf6e1d",
      "name": "Linear Regression",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Control/SYSTEM$CANCEL_QUERY",
      "id": "a66326f9-c78f-4462-997f-5f98642646a3",
      "parent_folder_id": "ee9e8013-0ca8-4768-8939-0ea70dbc892f",
      "name": "SYSTEM$CANCEL_QUERY",
      "entity_type": "SQL_ENTITY",
      "description": "Cancels the specified query (or statement) if it is currently active/running.",
      "content": "SYSTEM$CANCEL_QUERY( <query_id> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Encoding/Decoding/TRY_BASE64_DECODE_BINARY",
      "id": "a76fe20e-1d65-4151-8136-07815b365ddc",
      "parent_folder_id": "fc4f363e-00a4-4fc8-bc33-839c887fa6d8",
      "name": "TRY_BASE64_DECODE_BINARY",
      "entity_type": "SQL_ENTITY",
      "description": "A special version of BASE64_DECODE_BINARY that returns a NULL value if an error occurs during decoding.",
      "content": "TRY_BASE64_DECODE_BINARY(<input> [, <alphabet>])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Context/CURRENT_USER",
      "id": "a7eca27c-3b7d-405b-9114-4610cbc03f6f",
      "parent_folder_id": "825f6234-6811-4d6d-b615-78179c86c6fb",
      "name": "CURRENT_USER",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the name of the user currently logged into the system.",
      "content": "CURRENT_USER()\r\n\r\nCURRENT_USER",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$TYPEOF",
      "id": "a8864f76-a8ec-478d-a86f-76c691b0af7a",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$TYPEOF",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a string representing the SQL data type associated with an expression.",
      "content": "SYSTEM$TYPEOF( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAYS_OVERLAP",
      "id": "a99684e9-b8d6-40bc-bf83-e8558e9dd8a1",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAYS_OVERLAP",
      "entity_type": "SQL_ENTITY",
      "description": "Compares whether two arrays have at least one element in common. Returns TRUE if there is at least one element in common; otherwise returns FALSE. The function is NULL-safe, meaning it treats NULLs as known values for comparing equality.",
      "content": "ARRAYS_OVERLAP( <array1> , <array2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Extraction/YEAR* , DAY* , WEEK* , MONTH , QUARTER",
      "id": "a9bbeb76-f2f2-4565-9fbc-285fcbac0caf",
      "parent_folder_id": "62449bd1-1a27-436a-bc28-c80445d53b14",
      "name": "YEAR* , DAY* , WEEK* , MONTH , QUARTER",
      "entity_type": "SQL_ENTITY",
      "description": "Extracts the corresponding date part from a date or timestamp.  These functions are alternatives to using the DATE_PART (or EXTRACT) function with the equivalent date part (see Supported Date and Time Parts).",
      "content": "YEAR( <date_or_timestamp_expr> )\r\n\r\nYEAROFWEEK( <date_or_timestamp_expr> )\r\nYEAROFWEEKISO( <date_or_timestamp_expr> )\r\n\r\nDAY( <date_or_timestamp_expr> )\r\n\r\nDAYOFMONTH( <date_or_timestamp_expr> )\r\nDAYOFWEEK( <date_or_timestamp_expr> )\r\nDAYOFWEEKISO( <date_or_timestamp_expr> )\r\nDAYOFYEAR( <date_or_timestamp_expr> )\r\n\r\nWEEK( <date_or_timestamp_expr> )\r\n\r\nWEEKOFYEAR( <date_or_timestamp_expr> )\r\nWEEKISO( <date_or_timestamp_expr> )\r\n\r\nMONTH( <date_or_timestamp_expr> )\r\n\r\nQUARTER( <date_or_timestamp_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Any Data Type",
      "id": "aa279216-8902-489b-a538-cb69cfa8b75d",
      "parent_folder_id": "f7d813f4-6491-48b4-a1a8-105b410e1a51",
      "name": "Any Data Type",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Object Context/CURRENT_WAREHOUSE",
      "id": "aa4904d1-81b7-4b57-9f2e-4745bbb084f5",
      "parent_folder_id": "3a5a5b5a-fd24-43da-9c77-857e34297ea0",
      "name": "CURRENT_WAREHOUSE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the name of the warehouse in use for the current session.",
      "content": "CURRENT_WAREHOUSE()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Cryptographic/Checksum/SHA1_BINARY",
      "id": "aa5bd38a-94fc-4338-a6ca-5a7b225321f0",
      "parent_folder_id": "22bce7c4-5bc3-4488-9a2b-f69d60e70a3e",
      "name": "SHA1_BINARY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a 20-byte binary containing the 160-bit SHA-1 message digest.",
      "content": "SHA1_BINARY(<msg>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/IS_<object_type>/IS_INTEGER",
      "id": "aa5c5e6f-3d8d-4e95-aad6-66391320eed9",
      "parent_folder_id": "d57aac71-2f6f-4994-88ba-95be21d9f5f1",
      "name": "IS_INTEGER",
      "entity_type": "SQL_ENTITY",
      "description": "Returns TRUE if its VARIANT argument contains an integer value.",
      "content": "IS_INTEGER( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Linear Regression/REGR_AVGY",
      "id": "aabf950a-d005-4893-9094-7d3c5c0e90c3",
      "parent_folder_id": "b34304e2-db34-48cf-b339-214d4fc2b71b",
      "name": "REGR_AVGY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the average of the dependent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.",
      "content": "REGR_AVGY(y, x) OVER ( [ PARTITION BY <expr3> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Control/SYSTEM$CANCEL_ALL_QUERIES",
      "id": "ab6d8765-d169-4257-a5bb-60e13c49503a",
      "parent_folder_id": "ee9e8013-0ca8-4768-8939-0ea70dbc892f",
      "name": "SYSTEM$CANCEL_ALL_QUERIES",
      "entity_type": "SQL_ENTITY",
      "description": "Cancels all active/running queries in the specified session.",
      "content": "SYSTEM$CANCEL_ALL_QUERIES( <session_id> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Rounding and Truncation/CEIL",
      "id": "abc2b79e-ee3a-4fe6-97f2-cc91abc48966",
      "parent_folder_id": "c92cfc54-280e-4dc8-82f8-6599224e4332",
      "name": "CEIL",
      "entity_type": "SQL_ENTITY",
      "description": "Returns values from input_expr rounded to the nearest equal or larger integer, or to the nearest equal or larger value with the specified number of places after the decimal point.",
      "content": "CEIL( <input_expr> [, <scale_expr> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/COSH",
      "id": "abc39b56-9aea-4841-bf60-3d792893e590",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "COSH",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the hyperbolic cosine of its argument.",
      "content": "COSH( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions",
      "id": "abf8186d-0346-4582-a27f-871904d4bee2",
      "parent_folder_id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "name": "Window Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/POSITION",
      "id": "ac67dc40-b931-4b23-9d17-682d2b386d8e",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "POSITION",
      "entity_type": "SQL_ENTITY",
      "description": "Searches for the first occurrence of the first argument in the second argument and, if successful, returns the position (1-based) of the first argument in the second argument.",
      "content": "POSITION( <expr1>, <expr2> [ , <start_pos> ] )\r\n\r\nPOSITION( <expr1> IN <expr2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Addition/Subtraction/TIMEADD",
      "id": "aca24d7b-4cbb-43fb-9b51-afa394c79d89",
      "parent_folder_id": "8054e425-6b8c-49a9-a2de-46df896295d8",
      "name": "TIMEADD",
      "entity_type": "SQL_ENTITY",
      "description": "Adds the specified value for the specified date or time part to a date, time, or timestamp.  Alias for DATEADD.",
      "content": "TIMEADD( <date_or_time_part> , <value> , <date_or_time_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/CASE",
      "id": "acd16283-ecb4-4d4e-96d2-841ca728d61e",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "CASE",
      "entity_type": "SQL_ENTITY",
      "description": "Works like a cascading “if-then-else” statement. In the more general form, a series of conditions are evaluated in sequence. When a condition evaluates to TRUE, the evaluation stops and the associated result (after THEN) is returned. If none of the conditions evaluate to TRUE, then the result after the optional ELSE is returned, if present; otherwise NULL is returned.  In the second, “shorthand” form, the expression after CASE is compared to each of the WHEN expressions in sequence, until one matches; then the associated result (after THEN) is returned. If none of the expressions match, the result after the optional ELSE is returned, if present; otherwise NULL is returned.  Note that in the second form, a NULL CASE expression matches none of the WHEN expressions, even if one of the WHEN expressions is also NULL.",
      "content": "CASE\r\n    WHEN <condition1> THEN <result1>\r\n  [ WHEN <condition2> THEN <result2> ]\r\n  [ ... ]\r\n  [ ELSE <result3> ]\r\nEND\r\n\r\nCASE <expr>\r\n    WHEN <value1> THEN <result1>\r\n  [ WHEN <value2> THEN <result2> ]\r\n  [ ... ]\r\n  [ ELSE <result3> ]\r\nEND",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Regular Expression Matching/REGEXP_COUNT",
      "id": "ad6d87c5-396a-48c5-9d38-44d64f3e8347",
      "parent_folder_id": "8612cd4d-0c28-4e14-9735-673c6c7c0fe3",
      "name": "REGEXP_COUNT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the number of times that a pattern occurs in a string.",
      "content": "REGEXP_COUNT( <subject> , <pattern> [ , <position> , <parameters> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/OBJECT_AGG",
      "id": "ade64b2b-53de-46f3-bc28-9251a4d42180",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "OBJECT_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns one OBJECT per group. For each (key, value) input pair, where key must be a VARCHAR and value must be a VARIANT, the resulting OBJECT contains a key:value field.",
      "content": "Aggregate function\r\n\r\nOBJECT_AGG(<key>, <value>)\r\nWindow function\r\n\r\nOBJECT_AGG(<key>, <value>)\r\n    OVER ( [ PARTITION BY <expr2> ] )\r\n    [ WITHIN GROUP ( <orderby_clause> ) ]",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/VAR_SAMP",
      "id": "aea2b9c8-8940-4dfc-be7c-17713c5a6a66",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "VAR_SAMP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sample variance of non-NULL records in a group. If all records inside a group are NULL, a NULL is returned.",
      "content": "VAR_SAMP( [DISTINCT] <expr1> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Collation/COLLATION",
      "id": "aea6a8a4-e5cc-4c2d-8bc1-b44206d8eff4",
      "parent_folder_id": "6404aec8-7c86-44ee-b074-f016b818db1e",
      "name": "COLLATION",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the collation specification of the expression.",
      "content": "COLLATION(<expression>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Encoding/Decoding/BASE64_DECODE_BINARY",
      "id": "af5f1e1a-1958-4041-b15a-249ff26bd740",
      "parent_folder_id": "fc4f363e-00a4-4fc8-bc33-839c887fa6d8",
      "name": "BASE64_DECODE_BINARY",
      "entity_type": "SQL_ENTITY",
      "description": "Decodes a Base64-encoded string to a binary.",
      "content": "BASE64_DECODE_BINARY( <input> [ , <alphabet> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion & Casting",
      "id": "b0bbb22b-c561-4f62-a8b2-e3fc078023d5",
      "parent_folder_id": "ee86e399-6f11-4483-bdee-33b498a53753",
      "name": "Conversion & Casting",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/TO_OBJECT",
      "id": "b0dc557a-8d0a-494c-9849-0a622856c0d9",
      "parent_folder_id": "b0bbb22b-c561-4f62-a8b2-e3fc078023d5",
      "name": "TO_OBJECT",
      "entity_type": "SQL_ENTITY",
      "description": "Converts the input value to an object:  For a variant value containing an object, returns this object (in a value of type OBJECT).  For a variant value containing JSON null or for NULL input, returns NULL.  For all other input values, reports an error.",
      "content": "TO_OBJECT( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/ANY_VALUE",
      "id": "b11123a8-42c0-48b9-a548-c552cb2471a4",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "ANY_VALUE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns some value of the expression from the group. The result is non-deterministic.",
      "content": "ANY_VALUE( [ DISTINCT ] <expr1> ) OVER ( [ PARTITION BY <expr2> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/SPLIT_PART",
      "id": "b11c5b77-9c87-4661-a31a-511e0217efd1",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "SPLIT_PART",
      "entity_type": "SQL_ENTITY",
      "description": "Splits a given string and returns the requested part.  If a part does not exist, an empty string is returned. If any parameter is NULL, NULL is returned.",
      "content": "SPLIT_PART(<string>, <delimiter>, <partNr>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Context/LAST_TRANSACTION",
      "id": "b2445da7-1132-4512-9969-d06b80b953d9",
      "parent_folder_id": "825f6234-6811-4d6d-b615-78179c86c6fb",
      "name": "LAST_TRANSACTION",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the transaction ID of the last transaction that was either committed or rolled back in the current session.",
      "content": "LAST_TRANSACTION()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Linear Regression",
      "id": "b34304e2-db34-48cf-b339-214d4fc2b71b",
      "parent_folder_id": "abf8186d-0346-4582-a27f-871904d4bee2",
      "name": "Linear Regression",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/CHARINDEX",
      "id": "b3587640-5477-4932-97b0-d539f69bfcd2",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "CHARINDEX",
      "entity_type": "SQL_ENTITY",
      "description": "Searches for the first occurrence of the first argument in the second argument and, if successful, returns the position (1-based) of the first argument in the second argument.",
      "content": "CHARINDEX( <expr1>, <expr2> [ , <start_pos> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAY_CAT",
      "id": "b3b0dc98-e09a-4170-a1a8-7dd87d8afa5e",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAY_CAT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a concatenation of two arrays.",
      "content": "ARRAY_CAT( <array1> , <array2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/VARIANCE_POP",
      "id": "b3fece82-69f0-4a35-ae55-39a50d645677",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "VARIANCE_POP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the population variance of non-NULL records in a group. If all records inside a group are NULL, a NULL is returned.",
      "content": "VARIANCE_POP( [DISTINCT] <expr1> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/General Context/CURRENT_TIME",
      "id": "b4704e52-9a14-4ef5-8a74-b2ee4905cc1f",
      "parent_folder_id": "36ae0251-1bcc-4e7b-8fe5-e083565069d8",
      "name": "CURRENT_TIME",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the current time for the system.",
      "content": "CURRENT_TIME( [ <fract_sec_precision> ] )\r\n\r\nCURRENT_TIME",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/IS_<object_type>/IS_NULL_VALUE",
      "id": "b488dcee-272e-48a1-bdea-e2c3f8c0a053",
      "parent_folder_id": "d57aac71-2f6f-4994-88ba-95be21d9f5f1",
      "name": "IS_NULL_VALUE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns true if its VARIANT argument is a JSON null value.",
      "content": "IS_NULL_VALUE( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Boolean Data Type/TRY_TO_BOOLEAN",
      "id": "b51d6f2f-f2cd-488b-862f-61896594243b",
      "parent_folder_id": "0d930673-6f8b-4b99-91fe-53621a885983",
      "name": "TRY_TO_BOOLEAN",
      "entity_type": "SQL_ENTITY",
      "description": "A special version of TO_BOOLEAN that performs the same operation (i.e. converts an input expression to a Boolean value), but with error-handling support (i.e. if the conversion cannot be performed, it returns a NULL value instead of raising an error).  For more information, see Error-handling Conversion Functions.",
      "content": "TRY_TO_BOOLEAN( <string_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Date and Time Data Types/TO_TIME",
      "id": "b56e55b7-68bf-467e-98e8-521364b2e9a3",
      "parent_folder_id": "6e41e97a-a871-4e06-a5d6-8043e830a4ae",
      "name": "TO_TIME",
      "entity_type": "SQL_ENTITY",
      "description": "Converts an input expression into a time. If input is NULL, returns NULL.",
      "content": "TO_TIME( <string_expr> [, <format> ] )\r\nTO_TIME( <timestamp_expr> )\r\nTO_TIME( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Extraction/GET",
      "id": "b5799ce6-cb18-4b30-99b2-87288de8c0b0",
      "parent_folder_id": "f3987910-66c2-49ad-a80f-63146c591214",
      "name": "GET",
      "entity_type": "SQL_ENTITY",
      "description": "Extracts a value from an object or array; returns NULL if either of the arguments is NULL.  Note that this function should not be confused with the GET DML command.",
      "content": "GET( <obj> , <field_name> )\r\n\r\nGET( <v> , <field_name> )\r\n\r\nGET( <array> , <index> )\r\n\r\nGET( <v> , <index> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAY_SIZE",
      "id": "b5e4f0f1-6fe3-4116-85e2-035eba9a899d",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAY_SIZE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the size of the input array.  A variation of ARRAY_SIZE takes a VARIANT value as input. If the VARIANT value contains an array, the size of the array is returned; otherwise, NULL is returned if the value is not an array.",
      "content": "ARRAY_SIZE( <array> )\r\n\r\nARRAY_SIZE( <variant> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Construction",
      "id": "b62be236-8cc0-4a06-8733-aab6550fe3f3",
      "parent_folder_id": "4a7ef3e8-5d01-4e1f-b360-ec1c49c90320",
      "name": "Construction",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array & Object Creation and Manipulation",
      "id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "parent_folder_id": "ee86e399-6f11-4483-bdee-33b498a53753",
      "name": "Array & Object Creation and Manipulation",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/ANY_VALUE",
      "id": "b90a6e8a-d97a-4151-83e0-3a5be1bf1a9a",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "ANY_VALUE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns some value of the expression from the group. The result is non-deterministic.",
      "content": "ANY_VALUE( [ DISTINCT ] <expr1> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Extraction/DATE_PART",
      "id": "b99422b6-9f6f-4fbd-8913-76db4e196620",
      "parent_folder_id": "62449bd1-1a27-436a-bc28-c80445d53b14",
      "name": "DATE_PART",
      "entity_type": "SQL_ENTITY",
      "description": "Extracts the specified date or time part from a date, time, or timestamp.",
      "content": "DATE_PART( <date_or_time_part> , <date_or_time_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/COUNT",
      "id": "ba4052a0-1a22-4f90-8ad9-0fa074e98534",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "COUNT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns either the number of non-NULL records for the specified columns, or the total number of records.",
      "content": "COUNT( [ DISTINCT ] <expr1> [ , <expr2> ... ] )\r\n\r\nCOUNT( * )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/COUNT",
      "id": "ba5cb8b3-0e31-4b29-b7be-9a6fbe05ab4d",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "COUNT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns either the number of non-NULL records for the specified columns, or the total number of records.",
      "content": "COUNT( <expr1> [ , <expr2> ... ] )\r\n    OVER ( [ PARTITION BY <expr3> ] [ ORDER BY <expr4> [ ASC | DESC ] [ <window_frame> ] ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/DEGREES",
      "id": "baefbdbf-6175-4d8e-bb8e-ab5893f32121",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "DEGREES",
      "entity_type": "SQL_ENTITY",
      "description": "Converts radians to degrees.",
      "content": "DEGREES( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Rank-related/PERCENT_RANK",
      "id": "bbbfa071-a967-44ca-bc31-9f6bbf3b7acd",
      "parent_folder_id": "65dd50ca-a8ef-4ec2-85b0-fd1202f8109a",
      "name": "PERCENT_RANK",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the relative rank of a value within a group of values.",
      "content": "PERCENT_RANK() OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Linear Regression/REGR_COUNT",
      "id": "bc54c4a0-7173-481c-93a6-75d7a6053a74",
      "parent_folder_id": "b34304e2-db34-48cf-b339-214d4fc2b71b",
      "name": "REGR_COUNT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the number of non-null number pairs in a group.",
      "content": "REGR_COUNT(y, x) OVER ( [ PARTITION BY <expr3> ] )  ",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/PERCENTILE_CONT",
      "id": "bc77856c-99e4-47a3-ad73-7b266bb0947b",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "PERCENTILE_CONT",
      "entity_type": "SQL_ENTITY",
      "description": "Return a percentile value based on a continuous distribution of the input column (specified in order_by_expr). If no input row lies exactly at the desired percentile, the result is calculated using linear interpolation of the two nearest input values. NULL values are ignored in the calculation.",
      "content": "PERCENTILE_CONT( <percentile> ) WITHIN GROUP (ORDER BY <order_by_expr>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Rank-related/DENSE_RANK",
      "id": "bd1976fa-1a0d-43f9-a8eb-c70654c12a2f",
      "parent_folder_id": "65dd50ca-a8ef-4ec2-85b0-fd1202f8109a",
      "name": "DENSE_RANK",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the rank of a value within a group of values, without gaps in the ranks.  The rank value starts at 1 and continues up sequentially.  If two values are the same, they will have the same rank.",
      "content": "DENSE_RANK() OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ ASC | DESC ] [ <window_frame> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/STRTOK_SPLIT_TO_TABLE",
      "id": "bd7e6cec-5e0b-4b69-bfe3-1c6005a3f3b7",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "STRTOK_SPLIT_TO_TABLE",
      "entity_type": "SQL_ENTITY",
      "description": "Tokenizes a string with the given set of delimiters and flattens the results into rows.",
      "content": "STRTOK_TO_SPLIT_TO_TABLE(<string> [,<delimiter_list>])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/PI",
      "id": "be4c649f-e43f-4ba4-969d-114ed5aafa26",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "PI",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the value of pi as a floating-point value.",
      "content": "PI()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Hash",
      "id": "bfb6f315-b573-4fc5-bfac-c7252e133b29",
      "parent_folder_id": "abf8186d-0346-4582-a27f-871904d4bee2",
      "name": "Hash",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Control/SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS",
      "id": "c017a756-15a1-400f-97d8-191a1b449ab7",
      "parent_folder_id": "ee9e8013-0ca8-4768-8939-0ea70dbc892f",
      "name": "SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS",
      "entity_type": "SQL_ENTITY",
      "description": "Aborts the next run of the specified task if the system had already started to process it (i.e. its state is EXECUTING).",
      "content": "SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS( '<task_name>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/ATAN",
      "id": "c081b174-d833-446e-8e96-d24636a3286a",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "ATAN",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the inverse tangent (arc tangent) of its argument; the result is a number in the interval [-pi, pi].",
      "content": "ATAN( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/CORR",
      "id": "c22f9af8-2228-40f7-a317-0e7a8943ca9f",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "CORR",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the correlation coefficient for non-null pairs in a group. It is computed for non-null pairs using the following formula:  COVAR_POP(y, x) / (STDDEV_POP(x) * STDDEV_POP(y))  Where x is the independent variable and y is the dependent variable.",
      "content": "CORR( y , x ) OVER ( [ PARTITION BY <expr3> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$CLUSTERING_INFORMATION",
      "id": "c2b6b62f-3928-48bb-8428-eee48cbc3e79",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$CLUSTERING_INFORMATION",
      "entity_type": "SQL_ENTITY",
      "description": "Returns clustering information, including average clustering depth, for a table based on one or more columns in the table.",
      "content": "SYSTEM$CLUSTERING_INFORMATION( '<table_name>' , '( <col1> [ , <col2> ... ] )' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/OBJECT_INSERT",
      "id": "c2c67ee0-18ff-4da1-b3f6-439f36570706",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "OBJECT_INSERT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an object consisting of the input object with a new key-value pair inserted (or an existing key updated with a new value).",
      "content": "OBJECT_INSERT( <object> , <key> , <value> [ , <updateFlag> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Exponent and Root/FACTORIAL",
      "id": "c31bfcf0-a15c-4843-aabc-7419f330a991",
      "parent_folder_id": "5e2ca68b-b7dd-4508-beb0-a3520d531010",
      "name": "FACTORIAL",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the factorial of its input. The input argument must be an integer expression in the range of 0 to 33.",
      "content": "FACTORIAL( <integer_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Linear Regression/REGR_SXX",
      "id": "c3778414-ff0f-4520-b58e-743078c91890",
      "parent_folder_id": "a66240bf-3b81-4d25-9731-45531832b657",
      "name": "REGR_SXX",
      "entity_type": "SQL_ENTITY",
      "description": "Returns REGR_COUNT(y, x) * VAR_POP(x) for non-null pairs.",
      "content": "REGR_SXX(y, x)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Exponent and Root/POW, POWER",
      "id": "c47a25db-5715-42cf-9e91-f03e0553c56b",
      "parent_folder_id": "5e2ca68b-b7dd-4508-beb0-a3520d531010",
      "name": "POW, POWER",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a number (x) raised to the specified power (y).",
      "content": "POW(x, y)\r\n\r\nPOWER (x, y)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/BIT_LENGTH",
      "id": "c4a3d66a-6f43-457e-8398-146cb030c9f5",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "BIT_LENGTH",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the length of a string or binary value in bits.  Snowflake doesn’t use fractional bytes so length is always calculated as 8 * OCTET_LENGTH.",
      "content": "BIT_LENGTH(<string_or_binary>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/TO_JSON",
      "id": "c6d5b0db-703f-49b0-b78b-24831a690081",
      "parent_folder_id": "b0bbb22b-c561-4f62-a8b2-e3fc078023d5",
      "name": "TO_JSON",
      "entity_type": "SQL_ENTITY",
      "description": "Converts any VARIANT value to a string containing the JSON representation of the value. If the input is NULL, the result is also NULL.",
      "content": "TO_JSON( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Case Conversion",
      "id": "c761a251-9d15-4a37-afd5-e0b5df1b3d17",
      "parent_folder_id": "eb0a11a4-3341-43fe-af67-874f77b81187",
      "name": "Case Conversion",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/LIKE ANY",
      "id": "c861a7ef-adbd-4f0f-9677-0793db33cb01",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "LIKE ANY",
      "entity_type": "SQL_ENTITY",
      "description": "Allows case-sensitive matching of strings based on comparison with one or more patterns.  The operation is similar to LIKE. If the input string matches any of the patterns, this returns the input string.",
      "content": "<subject> LIKE ANY (<pattern1> [, <pattern2> ... ] ) [ ESCAPE <escape_char> ]",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information",
      "id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "parent_folder_id": "109ad4a7-dca5-4905-a4f3-8a76946c90ed",
      "name": "Information",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Bitwise Aggregation/BITAND_AGG",
      "id": "c900fddd-694b-4e20-b16b-199da79cf930",
      "parent_folder_id": "3f9c9987-4b5c-423c-9ef8-db538d930d08",
      "name": "BITAND_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the bitwise AND value of all non-NULL numeric records in a group.  For each bit position, if all rows have the bit set to 1, then the bit is set to 1 in the result. If any rows have that bit set to zero, the result is zero.  If all records inside the group are NULL, or if the group is empty, the function returns NULL.",
      "content": "BITAND_AGG( <expr1> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Rounding & Truncation",
      "id": "c92cfc54-280e-4dc8-82f8-6599224e4332",
      "parent_folder_id": "335f4fbe-d97c-42c0-9e16-99655156a8e1",
      "name": "Rounding & Truncation",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/SUM",
      "id": "ca0d72c2-1e8c-4747-8216-d72b60f80547",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "SUM",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sum of non-NULL records for expr. You can use the DISTINCT keyword to compute the sum of unique non-null values. If all records inside a group are NULL, the function returns NULL.",
      "content": "SUM( [ DISTINCT ] <expr1> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Cryptographic/Checksum/SHA2_BINARY",
      "id": "cac9452d-1adb-4b0d-84f1-4f80a172af1f",
      "parent_folder_id": "22bce7c4-5bc3-4488-9a2b-f69d60e70a3e",
      "name": "SHA2_BINARY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a binary containing the N-bit SHA-2 message digest, where N is the specified output digest size.",
      "content": "SHA2_BINARY(<msg> [, <digest_size>])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/JSON and XML Parsing/CHECK_XML",
      "id": "caddc3a3-c917-4aa7-aa3e-43a44004e515",
      "parent_folder_id": "5dd856a1-477f-4b43-9935-0ee0dc3e0593",
      "name": "CHECK_XML",
      "entity_type": "SQL_ENTITY",
      "description": "Checks the validity of an XML document. If the input string is NULL or a valid XML document, the output is NULL. In case of an XML parsing error, the output string contains the error message.",
      "content": "Locate records with broken XML:\r\n\r\nselect *, check_xml(xml_str) from my_table where check_xml(xml_str) is not null;",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/Session Object Context/CURRENT_SCHEMA",
      "id": "cb6d9196-d567-4d33-aa76-4c152b350ee2",
      "parent_folder_id": "3a5a5b5a-fd24-43da-9c77-857e34297ea0",
      "name": "CURRENT_SCHEMA",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the name of the schema in use by the current session.  To specify a different schema for the session, execute the USE SCHEMA command.",
      "content": "CURRENT_SCHEMA()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Boolean Aggregation",
      "id": "cba52012-ef90-460a-a1e6-707a473a0b0e",
      "parent_folder_id": "fcfe29fe-a075-43ce-a750-5f0158cf6e1d",
      "name": "Boolean Aggregation",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/IS_<object_type>/IS_BINARY",
      "id": "cba5ead5-a884-4bbc-991a-930962716773",
      "parent_folder_id": "d57aac71-2f6f-4994-88ba-95be21d9f5f1",
      "name": "IS_BINARY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns TRUE if its VARIANT argument contains a binary string.",
      "content": "IS_BINARY( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Bitwise Expression Functions/BITXOR",
      "id": "cbab345e-2bfe-4407-bb6d-70df49e4f1e8",
      "parent_folder_id": "21b07106-8121-442f-a8f4-58f90665d54d",
      "name": "BITXOR",
      "entity_type": "SQL_ENTITY",
      "description": "Bitwise XOR of two numeric expressions (a and b).",
      "content": "BITXOR(a, b)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/MODE",
      "id": "cbcfbe8b-dd53-4bec-b9cf-c4e30857daf5",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "MODE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the most frequent value for the values within expr1. NULL values are ignored. If all the values are NULL, or there are 0 rows, then the function returns NULL.",
      "content": "MODE( <expr1> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/WAREHOUSE_LOAD_HISTORY",
      "id": "cc8178cc-2af0-4d4d-9ee9-acabb8e550f4",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "WAREHOUSE_LOAD_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "This table function can be used to query the activity history (defined as the “query load”) for a single warehouse within a specified date range.",
      "content": "WAREHOUSE_LOAD_HISTORY(\r\n      [ DATE_RANGE_START => <constant_expr> ]\r\n      [, DATE_RANGE_END => <constant_expr> ]\r\n      [, WAREHOUSE_NAME => '<string>' ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/RATIO_TO_REPORT",
      "id": "cd6a0fa9-c617-4cae-8c58-128f15c6813e",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "RATIO_TO_REPORT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the ratio of a value within a group to the sum of the values within the group. If expr1 evaluates to null, then RATIO_TO_REPORT returns null.",
      "content": "RATIO_TO_REPORT( <expr1> ) [ OVER ( [ PARTITION BY <expr2> ] [ ORDER BY <expr3> ] ) ]",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/COS",
      "id": "cdc85563-6065-4530-acb3-a8a8172c953f",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "COS",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the cosine of its argument; the argument should be expressed in radians.",
      "content": "COS( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$GET_AWS_SNS_IAM_POLICY",
      "id": "ced903f6-bee4-4ff3-a317-3850e3418b34",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$GET_AWS_SNS_IAM_POLICY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an AWS IAM policy statement that must be added to the Amazon SNS topic policy in order to grant the Amazon SQS messaging queue created by Snowflake to subscribe to the topic.  This function is used when automating Snowpipe using SQS notifications for S3 events. To avoid conflicts with existing SQS queues for the same endpoint, i.e. S3 bucket, creating an SNS topic for the bucket and subscribing all SQS queues to this topic enables SNS to publish event notifications for the bucket to multiple subscribers.",
      "content": "SYSTEM$GET_AWS_SNS_IAM_POLICY( '<sns_topic_arn>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/ATANH",
      "id": "cf8ac4ff-4066-4aa9-a06b-cfc3af656c90",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "ATANH",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the inverse (arc) hyperbolic tangent of its argument.",
      "content": "ATANH( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Bitwise Aggregation/BITOR_AGG",
      "id": "d0039a81-4a5e-4469-86a1-6864357e9ae9",
      "parent_folder_id": "6238bea1-d58f-46d2-a484-024bd53cb4f3",
      "name": "BITOR_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the bitwise OR value of all non-NULL numeric records in a group.  For each bit position, if at least one row has the bit set to 1, then the bit is set to 1 in the result. If all rows have that bit set to zero, the result is zero.  If all records inside the group are NULL, or if the group is empty, the function returns NULL.",
      "content": "BITOR_AGG( <expr1> ) OVER ( [ PARTITION BY <expr2> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Boolean Aggregation/BOOLOR_AGG",
      "id": "d1df90f7-fc85-4448-9fed-111cc1c9c45f",
      "parent_folder_id": "3db94cb8-8831-41b6-84f5-2242a3f45266",
      "name": "BOOLOR_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the logical (boolean) OR value of all non-NULL boolean records in a group.  BOOLOR_AGG returns ‘true’ if at least one record in the group evaluates to ‘true’.  If all records inside the group are NULL, or if the group is empty, the function returns NULL.",
      "content": "BOOLOR_AGG( <expr> ) OVER ( [ PARTITION BY <partition_expr> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/ASIN",
      "id": "d258ac3d-4e48-40d9-a266-edab4dc2053e",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "ASIN",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the inverse sine (arc sine) of its argument; the result is a number in the interval [-pi, pi].",
      "content": "ASIN( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Rounding and Truncation/ABS",
      "id": "d3bdeda9-bdda-48f5-ac75-6dbb37192a3a",
      "parent_folder_id": "c92cfc54-280e-4dc8-82f8-6599224e4332",
      "name": "ABS",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the absolute value of a numeric expression.",
      "content": "ABS( <num_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/IS_<object_type>",
      "id": "d57aac71-2f6f-4994-88ba-95be21d9f5f1",
      "parent_folder_id": "8869dc90-d067-4d98-8f87-1ce865f0725d",
      "name": "IS_<object_type>",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Data Generation Functions/Random",
      "id": "d5803490-021e-4e48-8955-3c3e770ea146",
      "parent_folder_id": "f77ad3ce-991f-4aa3-99da-0cfcf4cde9b1",
      "name": "Random",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/LTRIM",
      "id": "d6f2d53f-2368-4fe4-b710-b8a62b775285",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "LTRIM",
      "entity_type": "SQL_ENTITY",
      "description": "Removes leading characters, including whitespace, from a string.",
      "content": "LTRIM( <expr> [, <characters> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/MEDIAN",
      "id": "d7437d46-3356-4bb3-a295-29a53c4d0b27",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "MEDIAN",
      "entity_type": "SQL_ENTITY",
      "description": "Determines the median of a set of values.",
      "content": "MEDIAN( <expr> ) OVER ( [ PARTITION BY <expr2> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Encoding/Decoding/HEX_DECODE_BINARY",
      "id": "d77190b9-7b13-4a94-83fa-83045c2214be",
      "parent_folder_id": "fc4f363e-00a4-4fc8-bc33-839c887fa6d8",
      "name": "HEX_DECODE_BINARY",
      "entity_type": "SQL_ENTITY",
      "description": "Decodes a hex-encoded string to a binary.",
      "content": "HEX_DECODE_BINARY(<input>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/OBJECT_DELETE",
      "id": "d77401e0-6d4a-4395-9080-02aef8bf449a",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "OBJECT_DELETE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an object containing the contents of the input (i.e.source) object with one or more keys removed.",
      "content": "OBJECT_DELETE( <object>, <key1> [, <key2>, ... ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$WHITELIST_PRIVATELINK",
      "id": "d99d8608-2959-412f-a721-8f0fe3aabac1",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$WHITELIST_PRIVATELINK",
      "entity_type": "SQL_ENTITY",
      "description": "Returns hostnames and port numbers for AWS PrivateLinkdeployments to add to your firewall’s whitelist so that you can access Snowflake from behind your firewall. The output of this function can then be passed into the Snowflake Connectivity Diagnostic Tool (SnowCD) for AWS PrivateLink deployments only.  Typically, Snowflake customers use a firewall to prevent unauthorized access. By default, your firewall might block access to Snowflake. To update your firewall’s whitelist, you need to know the hostnames and port numbers for your Snowflake account, stages, and other other hosts used by Snowflake.",
      "content": "SYSTEM$WHITELIST_PRIVATELINK()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Numeric Data Types/TO_DECIMAL , TO_NUMBER , TO_NUMERIC",
      "id": "d9a697fe-183a-437e-9f6b-76630f04d89e",
      "parent_folder_id": "0e00f3e3-a020-4c4e-9469-2714d7556382",
      "name": "TO_DECIMAL , TO_NUMBER , TO_NUMERIC",
      "entity_type": "SQL_ENTITY",
      "description": "Converts an input expression to a fixed-point number. For NULL input, the output is NULL.",
      "content": "TO_DECIMAL( <expr> [, '<format>' ] [, <precision> [, <scale> ] ] )\r\n\r\nTO_NUMBER( <expr> [, '<format>' ] [, <precision> [, <scale> ] ] )\r\n\r\nTO_NUMERIC( <expr> [, '<format>' ] [, <precision> [, <scale> ] ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Bitwise Expression Functions/BITOR",
      "id": "da4471a7-4f07-4558-b554-f95668dd7afa",
      "parent_folder_id": "21b07106-8121-442f-a8f4-58f90665d54d",
      "name": "BITOR",
      "entity_type": "SQL_ENTITY",
      "description": "Bitwise OR of two numeric expressions (a and b).",
      "content": "BITOR(a, b)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Addition/Subtraction/TIMEDIFF",
      "id": "dacaec94-5a74-4ef8-8efd-2e4607b57c5d",
      "parent_folder_id": "8054e425-6b8c-49a9-a2de-46df896295d8",
      "name": "TIMEDIFF",
      "entity_type": "SQL_ENTITY",
      "description": "Calculates the difference between two date, time, or timestamp expressions based on the specified date or time part.  Alternative for DATEDIFF.",
      "content": "TIMEDIFF( <date_or_time_part> , <date_or_time_expr1> , <date_or time_expr2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Linear Regression/REGR_AVGY",
      "id": "dbb50fa1-85e1-4dce-901d-4fc36e58518c",
      "parent_folder_id": "a66240bf-3b81-4d25-9731-45531832b657",
      "name": "REGR_AVGY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the average of the dependent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.",
      "content": "REGR_AVGY(y, x)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Semi-structured Data Aggregation/ARRAY_AGG",
      "id": "dc1d72ed-a4f7-4a7c-a3d6-be79db2dfbb5",
      "parent_folder_id": "17728ca8-58ed-4cfc-b7c0-5428a823263c",
      "name": "ARRAY_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the input values, pivoted into an ARRAY. If the input is empty, an empty ARRAY is returned.",
      "content": "ARRAY_AGG( [ DISTINCT ] <expr1> )\r\n    OVER ( [ PARTITION BY <expr2> ] )\r\n    [ WITHIN GROUP ( <orderby_clause> ) ]",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/MIN , MAX",
      "id": "dd045d5b-b71c-4c3e-9e32-fdfe1b284174",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "MIN , MAX",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the minimum or maximum value for the records within expr. NULL values are ignored unless all the records are NULL, in which case a NULL value is returned.",
      "content": "MAX( <expr> )\r\nMIN( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/TO_XML",
      "id": "de1a7c9a-72c9-402b-8fb6-83cb9af02bd4",
      "parent_folder_id": "b0bbb22b-c561-4f62-a8b2-e3fc078023d5",
      "name": "TO_XML",
      "entity_type": "SQL_ENTITY",
      "description": "Converts any VARIANT value to a string containing the XML representation of the value. If the input is NULL, the result is also NULL.",
      "content": "This shows how to use the function:\r\n\r\nCreate a table and data:\r\n\r\ncreate table xml1 (x variant);\r\ninsert into xml1 (x)\r\n  select to_variant(\r\n    '<note> <body>Sample XML</body> </note>');\r\nNow run two queries. The first shows the output from TO_XML, and the second shows the output as varchar for comparison:\r\n\r\nselect to_xml(x) from xml1;\r\nselect to_varchar(x) from xml1;\r\nOutput:\r\n\r\n+--------------------------------------------------------------------------------------------------------------+\r\n| TO_XML(X)                                                                                                    |\r\n|--------------------------------------------------------------------------------------------------------------|\r\n| <SnowflakeData type=\"VARCHAR\">&lt;note&gt; &lt;body&gt;Sample XML&lt;/body&gt; &lt;/note&gt;</SnowflakeData> |\r\n+--------------------------------------------------------------------------------------------------------------+\r\n+----------------------------------------+\r\n| TO_VARCHAR(X)                          |\r\n|----------------------------------------|\r\n| <note> <body>Sample XML</body> </note> |\r\n+----------------------------------------+",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/COALESCE",
      "id": "de205117-fde3-47f8-9ec6-10b038728e26",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "COALESCE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the first non-NULL expression among its arguments, or NULL if all its arguments are NULL.",
      "content": "COALESCE( <expr1> , <expr2> [ , ... , <exprN> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/SIN",
      "id": "de4f7d7f-91b4-4d25-ba13-13b3a4ddfece",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "SIN",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the sine of its argument; the argument should be expressed in radians.",
      "content": "SIN( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Numeric Data Types/TRY_TO_DECIMAL, TRY_TO_NUMBER, TRY_TO_NUMERIC",
      "id": "de64b6da-74fe-4342-a2d0-fa1798924641",
      "parent_folder_id": "0e00f3e3-a020-4c4e-9469-2714d7556382",
      "name": "TRY_TO_DECIMAL, TRY_TO_NUMBER, TRY_TO_NUMERIC",
      "entity_type": "SQL_ENTITY",
      "description": "A special version of TO_DECIMAL , TO_NUMBER , TO_NUMERIC that performs the same operation (i.e. converts an input expression to a fixed-point number), but with error-handling support (i.e if the conversion cannot be performed, it returns a NULL value instead of raising an error).  These functions are synonymous.",
      "content": "TRY_TO_DECIMAL( <string_expr> [, '<format>' ] [, <precision> [, <scale> ] ] )\r\n\r\nTRY_TO_NUMBER( <string_expr> [, '<format>' ] [, <precision> [, <scale> ] ] )\r\n\r\nTRY_TO_NUMERIC( <string_expr> [, '<format>' ] [, <precision> [, <scale> ] ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/CONCAT , ||",
      "id": "df1dd72c-9d59-42a0-9df7-9b92682c760d",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "CONCAT , ||",
      "entity_type": "SQL_ENTITY",
      "description": "Concatenates two or more strings, or concatenates two or more binary values. If any of the values is null, the result is also null.  The || operator provides alternative syntax for CONCAT.",
      "content": "CONCAT( <expr1> , <expr2> [ , <exprN> ... ] )\r\n\r\n<expr1> || <expr2> [ || <exprN> ... ]",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Rank-related/LEAD",
      "id": "df262380-3b71-45f8-a77e-0c6965b530de",
      "parent_folder_id": "65dd50ca-a8ef-4ec2-85b0-fd1202f8109a",
      "name": "LEAD",
      "entity_type": "SQL_ENTITY",
      "description": "Accesses data in a subsequent row in the same result set without having to join the table to itself.",
      "content": "LEAD ( <expr> [ , <offset> , <default> ] ) [ { IGNORE | RESPECT } NULLS ] OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/VALIDATE",
      "id": "df8789b8-e356-4a01-b7d7-b88e9bb72892",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "VALIDATE",
      "entity_type": "SQL_ENTITY",
      "description": "Validates the files loaded in a past execution of the COPY INTO <table> command and returns all the errors encountered during the load, rather than just the first error.",
      "content": "VALIDATE( [<namespace>.]<table_name> , JOB_ID => { '<query_id>' | _last } )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Encoding/Decoding/BASE64_ENCODE",
      "id": "df8e2d5c-107f-423d-a84f-b2ddf72016b5",
      "parent_folder_id": "fc4f363e-00a4-4fc8-bc33-839c887fa6d8",
      "name": "BASE64_ENCODE",
      "entity_type": "SQL_ENTITY",
      "description": "Encodes the input (string or binary) using Base64 encoding.",
      "content": "BASE64_ENCODE( <input> [ , <max_line_length> ] [ , <alphabet> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/ZEROIFNULL",
      "id": "df9a5664-7e42-4ef4-ad19-50a3853a8bf6",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "ZEROIFNULL",
      "entity_type": "SQL_ENTITY",
      "description": "Returns 0 if its argument is null; otherwise, returns its argument.",
      "content": "ZEROIFNULL( <expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/TYPEOF",
      "id": "e030d937-1a33-4f76-98ce-42d630099ca3",
      "parent_folder_id": "8869dc90-d067-4d98-8f87-1ce865f0725d",
      "name": "TYPEOF",
      "entity_type": "SQL_ENTITY",
      "description": "Reports the type of a value stored in a VARIANT column. The type is returned as a string.",
      "content": "TYPEOF( <column> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$DATABASE_REFRESH_PROGRESS , SYSTEM$DATABASE_REFRESH_PROGRESS_BY_JOB",
      "id": "e07da272-fb94-4f01-97cc-b80211aaacf0",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$DATABASE_REFRESH_PROGRESS , SYSTEM$DATABASE_REFRESH_PROGRESS_BY_JOB",
      "entity_type": "SQL_ENTITY",
      "description": "The SYSTEM$DATABASE_REFRESH_PROGRESS family of functions can be used to query the status of a database refresh along various dimensions:  SYSTEM$DATABASE_REFRESH_PROGRESS returns a JSON object indicating the current refresh status for a global secondary database by name.  SYSTEM$DATABASE_REFRESH_PROGRESS_BY_JOB returns a JSON object indicating the current refresh status for a global secondary database by refresh query.",
      "content": "SYSTEM$DATABASE_REFRESH_PROGRESS( '<secondary_db_name>' )\r\n\r\nSYSTEM$DATABASE_REFRESH_PROGRESS_BY_JOB( '<query_id>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/ACOSH",
      "id": "e0d2bffa-cbb0-49b1-9006-599e54927b5c",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "ACOSH",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the inverse (arc) hyperbolic cosine of its input.",
      "content": "ACOSH( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/IS_<object_type>/IS_DOUBLE , IS_REAL",
      "id": "e0ef8233-79c9-4d8a-8f28-b6fadad4f05c",
      "parent_folder_id": "d57aac71-2f6f-4994-88ba-95be21d9f5f1",
      "name": "IS_DOUBLE , IS_REAL",
      "entity_type": "SQL_ENTITY",
      "description": "Returns TRUE if its VARIANT argument contains a floating-point value, fixed-point decimal, or integer.  These functions are synonymous.",
      "content": "IS_DOUBLE( <variant_expr> )\r\n\r\nIS_REAL( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Statistics and Probability/KURTOSIS",
      "id": "e124e490-7e0a-4898-b53d-220828d2b59f",
      "parent_folder_id": "e33a74a1-682f-48e5-bb80-49e9a952e7c0",
      "name": "KURTOSIS",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the population excess kurtosis of non-NULL records. If all records inside a group are NULL, the function returns NULL.  The following formula is used to compute the population excess kurtosis:  (n * (n+1))/((n-1) * (n-2) * (n-3)) * (n * m_4/(k_2)^2) - 3 * (n-1)^2 / ((n-2) * (n-3))  where:  n denotes the number of non null records.  m_4 denotes the sample fourth central moment.  k_2 denotes the symmetric unbiased estimator of the variance.",
      "content": "KURTOSIS( <expr> ) OVER ( [ PARTITION BY <expr2> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Truncation/TIME_SLICE",
      "id": "e12db89c-9ad0-4438-9663-5f575f68c06f",
      "parent_folder_id": "5731b996-7309-4f9b-9dd3-32954fd4098f",
      "name": "TIME_SLICE",
      "entity_type": "SQL_ENTITY",
      "description": "Calculates the beginning or end of a “slice” of time, where the length of the slice is a multiple of a standard unit of time (minute, hour, day, etc.).  This function can be used to calculate the start and end times of fixed-width “buckets” into which data can be categorized.",
      "content": "TIME_SLICE( <date_or_time_expr> , <slice_length> , <date_or_time_part> [ , <start_or_end> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/STAGE_STORAGE_USAGE_HISTORY",
      "id": "e15db669-9adc-4ef8-9751-35cd99c553bf",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "STAGE_STORAGE_USAGE_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "This table function can be used to query the average daily data storage usage, in bytes, for all the Snowflake stages in your account within a specified date range. The output will include storage for:  Named internal stages.  Default staging areas (for tables and user",
      "content": "STAGE_STORAGE_USAGE_HISTORY(\r\n      [ DATE_RANGE_START => <constant_expr> ]\r\n      [, DATE_RANGE_END => <constant_expr> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Information/SYSTEM$CLUSTERING_DEPTH",
      "id": "e197d6e0-b78b-49f9-b7a8-029ff8e06a80",
      "parent_folder_id": "c880973f-f1e5-43f8-94ec-0b2d00386807",
      "name": "SYSTEM$CLUSTERING_DEPTH",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the average depth of the table according to the specified columns (or the clustering key defined for the table). The average depth of a populated table (i.e. a table containing data) is always 1 or more. The smaller the average depth, the better clustered the table is with regards to the specified columns.",
      "content": "SYSTEM$CLUSTERING_DEPTH( '<table_name>' , '( <col1> [ , <col2> ... ] )' [ , '<predicate>' ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Text , Character , Binary Data Types",
      "id": "e1cc2707-c813-4249-8b67-665f06e2f5f7",
      "parent_folder_id": "f7d813f4-6491-48b4-a1a8-105b410e1a51",
      "name": "Text , Character , Binary Data Types",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/DECODE",
      "id": "e1f977db-827e-4aa5-b698-de9caa778692",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "DECODE",
      "entity_type": "SQL_ENTITY",
      "description": "Compares the select expression to each search expression in order. As soon as a search expression matches the selection expression, the corresponding result expression is returned.",
      "content": "DECODE( <expr> , <search1> , <result1> [ , <search2> , <result2> ... ] [ , <default> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/LISTAGG",
      "id": "e255fc69-8d6f-4af4-87db-7ca682240b61",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "LISTAGG",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the concatenated input values, separated by the delimiter string.",
      "content": "LISTAGG( [ DISTINCT ] <expr1> [, <delimiter> ] )\r\n    OVER ( [ PARTITION BY <expr2> ] )\r\n    [ WITHIN GROUP ( <orderby_clause> ) ]",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/TRANSLATE",
      "id": "e31bd5ca-e751-44e4-8a32-81147fc310e8",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "TRANSLATE",
      "entity_type": "SQL_ENTITY",
      "description": "Translates subject from the characters in sourceAlphabet to the characters in targetAlphabet.",
      "content": "TRANSLATE( <subject>, <sourceAlphabet>, <targetAlphabet> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Bitwise Expression Functions/BITAND",
      "id": "e31f9371-11f2-4156-a9dc-d504347e2ac0",
      "parent_folder_id": "21b07106-8121-442f-a8f4-58f90665d54d",
      "name": "BITAND",
      "entity_type": "SQL_ENTITY",
      "description": "Bitwise AND of two numeric expressions (a and b).",
      "content": "BITAND(a, b)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Statistics & Probability",
      "id": "e33a74a1-682f-48e5-bb80-49e9a952e7c0",
      "parent_folder_id": "abf8186d-0346-4582-a27f-871904d4bee2",
      "name": "Statistics & Probability",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAY_INSERT",
      "id": "e4beea4a-11bd-41f5-bdd5-45800987e60a",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAY_INSERT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an array containing all elements from the source array as well as the new element.",
      "content": "ARRAY_INSERT( <array> , <pos> , <new_element> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Conversion",
      "id": "e4d0270c-a448-41ae-8887-adf78ec1a418",
      "parent_folder_id": "4a7ef3e8-5d01-4e1f-b360-ec1c49c90320",
      "name": "Conversion",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Logarithmic/LN",
      "id": "e5401199-5ed4-4560-bf06-26f3947d17ce",
      "parent_folder_id": "56eda230-7ff2-4e49-8e70-8db1f14f2e6a",
      "name": "LN",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the natural logarithm of a numeric expression.",
      "content": "LN(<expr>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Construction/DATE_FROM_PARTS",
      "id": "e6f66e9c-cf9f-442c-ac5c-c507cb85da65",
      "parent_folder_id": "b62be236-8cc0-4a06-8733-aab6550fe3f3",
      "name": "DATE_FROM_PARTS",
      "entity_type": "SQL_ENTITY",
      "description": "Creates a date from individual numeric components that represent the year, month, and day of the month.",
      "content": "DATE_FROM_PARTS( <year>, <month>, <day> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/PIPE_USAGE_HISTORY",
      "id": "e70565fc-fe82-4dbb-8522-33d39eec48a0",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "PIPE_USAGE_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "This table function can be used to query the history of data loaded into Snowflake tables using Snowpipe within a specified date range. The function returns the history of data loaded and credits billed for your entire Snowflake account.",
      "content": "PIPE_USAGE_HISTORY(\r\n      [ DATE_RANGE_START => <constant_expr> ]\r\n      [, DATE_RANGE_END => <constant_expr> ]\r\n      [, PIPE_NAME => '<string>' ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Extraction/DAYNAME",
      "id": "e76323cd-0fbd-4d48-8d69-17230228b9b0",
      "parent_folder_id": "62449bd1-1a27-436a-bc28-c80445d53b14",
      "name": "DAYNAME",
      "entity_type": "SQL_ENTITY",
      "description": "Extracts the three-letter day-of-week name from the specified date or timestamp.",
      "content": "DAYNAME( <date_or_timestamp_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Extraction/XMLGET",
      "id": "eab970d0-7947-4fd1-8489-4b8d1a215f80",
      "parent_folder_id": "f3987910-66c2-49ad-a80f-63146c591214",
      "name": "XMLGET",
      "entity_type": "SQL_ENTITY",
      "description": "Extracts an XML element object (often referred to as simply a “tag”) from a content of outer XML element object by the name of the tag and its instance number (counting from 0):  If any argument of XMLGET is NULL, the result is NULL.  If the tag instance is not found, the result is similarly NULL.",
      "content": "XMLGET( <type> , <tag_name> , [ <instance_num> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions",
      "id": "eb0a11a4-3341-43fe-af67-874f77b81187",
      "parent_folder_id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "name": "String & Binary Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Encoding/Decoding/HEX_DECODE_STRING",
      "id": "eb1b468e-25c9-446f-a478-c8b679057bab",
      "parent_folder_id": "fc4f363e-00a4-4fc8-bc33-839c887fa6d8",
      "name": "HEX_DECODE_STRING",
      "entity_type": "SQL_ENTITY",
      "description": "Decodes a hex-encoded string to a string.",
      "content": "HEX_DECODE_STRING(<input>)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Bitwise Expression Functions/BITOR_AGG",
      "id": "eb6ad97b-1784-40ee-ba2d-16aa92322c0d",
      "parent_folder_id": "21b07106-8121-442f-a8f4-58f90665d54d",
      "name": "BITOR_AGG",
      "entity_type": "SQL_ENTITY",
      "description": "Same as BITOR, but across all numeric records in group a.",
      "content": "BITOR_AGG(a)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/ARRAY_CONSTRUCT_COMPACT",
      "id": "eb6c44b2-1624-41fc-a894-eca0231d97cd",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "ARRAY_CONSTRUCT_COMPACT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an array constructed from zero, one, or more inputs; the constructed array omits any NULL input values.",
      "content": "ARRAY_CONSTRUCT_COMPACT( [ <expr1> ] [ , <expr2> [ , ... ] ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/ASCII",
      "id": "eb6df4d2-66db-4f31-8dd1-32938a395456",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "ASCII",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the ASCII code for the first character of a string. If the string is empty, a value of 0 is returned.",
      "content": "ASCII( <input> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Context Functions/General Context/CURRENT_CLIENT",
      "id": "ebddfb3f-8d27-4e82-8d96-8508fe4313ae",
      "parent_folder_id": "36ae0251-1bcc-4e7b-8fe5-e083565069d8",
      "name": "CURRENT_CLIENT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the version of the client from which the function was called. If called from an application using the JDBC or ODBC driver to connect to Snowflake, returns the version of the driver.",
      "content": "CURRENT_CLIENT()",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/BOOLOR",
      "id": "ec9cdc82-db3c-4ffc-97ec-60466d45ca50",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "BOOLOR",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the Boolean OR of two numeric expressions. In accordance with Boolean semantics:  Non-zero values (including negative numbers) are regarded as True.  Zero values are regarded as False.",
      "content": "BOOLOR( expr1 , expr2 )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/REGR_VALY",
      "id": "ed60950b-0343-43e7-8c6f-57e7a61ac6f7",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "REGR_VALY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns NULL if the second argument is NULL; otherwise, returns the first argument.  Note that REGR_VALY is a NULL-preserving function, while the more commonly-used NVL is a NULL-replacing function.",
      "content": "REGR_VALY( <y> , <x> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/Rank-related/ROW_NUMBER",
      "id": "ed6a7120-8cb7-4798-9edf-7977a6391593",
      "parent_folder_id": "65dd50ca-a8ef-4ec2-85b0-fd1202f8109a",
      "name": "ROW_NUMBER",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a unique row number for each row within a window partition.  The row number starts at 1 and continues up sequentially.",
      "content": "ROW_NUMBER() OVER (\r\n  [ PARTITION BY <expr1> [, <expr2> ... ] ]\r\n  ORDER BY <expr3> [ , <expr4> ... ] [ { ASC | DESC } ]\r\n  )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions/Boolean Data Type/TO_BOOLEAN",
      "id": "ed6fc0c4-3b09-420b-996b-5c36bb38b7be",
      "parent_folder_id": "0d930673-6f8b-4b99-91fe-53621a885983",
      "name": "TO_BOOLEAN",
      "entity_type": "SQL_ENTITY",
      "description": "Coverts the input text or numeric expression to a Boolean value. For NULL input, the output is NULL.",
      "content": "TO_BOOLEAN( <text_or_numeric_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/GENERATOR",
      "id": "edb8bd5a-4fff-49fc-b0ed-04ab99dace69",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "GENERATOR",
      "entity_type": "SQL_ENTITY",
      "description": "Creates rows of data based either on a specified number of rows, a specified generation period (in seconds), or both. This system-defined table function enables synthetic row generation.  Note that it is possible to generate virtual tables with 0 columns but possibly many rows. Such virtual tables are useful for queries whose SELECT clause consists entirely of data-generating functions.",
      "content": "GENERATOR( ROWCOUNT => <count> [ , TIMELIMIT => <sec> ] )\r\n\r\nGENERATOR( [ TIMELIMIT => <sec> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/TASK_HISTORY",
      "id": "ee7d619a-2a67-4897-8071-70bede612c88",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "TASK_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "This table function can be used to query the history of task usage within a specified date range. The function returns the history of task usage for your entire Snowflake account or a specified task.",
      "content": "TASK_HISTORY(\r\n      [ SCHEDULED_TIME_RANGE_START => <constant_expr> ]\r\n      [, SCHEDULED_TIME_RANGE_END => <constant_expr> ]\r\n      [, RESULT_LIMIT => <integer> ]\r\n      [, TASK_NAME => '<string>' ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions",
      "id": "ee86e399-6f11-4483-bdee-33b498a53753",
      "parent_folder_id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "name": "Semi-structured Data Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/System Functions/Control",
      "id": "ee9e8013-0ca8-4768-8939-0ea70dbc892f",
      "parent_folder_id": "109ad4a7-dca5-4905-a4f3-8a76946c90ed",
      "name": "Control",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Array/Object Creation and Manipulation/OBJECT_CONSTRUCT",
      "id": "eee7f2d0-b4fc-4362-b1bf-9ecddd43aec6",
      "parent_folder_id": "b67a2452-ea02-44ac-a19d-8e658f20dc7d",
      "name": "OBJECT_CONSTRUCT",
      "entity_type": "SQL_ENTITY",
      "description": "Returns an object constructed from the arguments.",
      "content": "OBJECT_CONSTRUCT( [<key1>, <value1> [, <keyN>, <valueN> ...]] )\r\n\r\nOBJECT_CONSTRUCT( * )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/STDDEV_POP",
      "id": "ef336a61-4248-487b-b4ee-07962c58d0d4",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "STDDEV_POP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the population standard deviation (square root of variance) of non-NULL values. If all records inside a group are NULL, returns NULL.",
      "content": "STDDEV_POP([DISTINCT] x)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/LIKE",
      "id": "efa54827-7dbc-4863-8f91-0f18a337d150",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "LIKE",
      "entity_type": "SQL_ENTITY",
      "description": "Allows case-sensitive matching of strings based on comparison with a pattern. For case-insensitive matching, use ILIKE instead.  If the subject string matches the pattern, this returns the subject string.  LIKE, ILIKE, and RLIKE all perform similar operations; however, RLIKE uses POSIX EXE (Extended Regular Expression) syntax instead of the SQL pattern syntax used by LIKE and ILIKE.",
      "content": "<subject> LIKE <pattern> [ ESCAPE <escape> ]\r\n\r\nLIKE( <subject> , <pattern> [ , <escape> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/UUID_STRING",
      "id": "efa5aa87-4311-4246-99bb-fb4abc10d4ab",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "UUID_STRING",
      "entity_type": "SQL_ENTITY",
      "description": "Generates either a version 4 (random) or version 5 (named) RFC 4122-compliant UUID as a formatted string.",
      "content": "UUID_STRING()\r\n\r\nUUID_STRING( <uuid> , <name> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/ILIKE",
      "id": "f1224fbc-ad8e-4310-ba04-c2bf01336b61",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "ILIKE",
      "entity_type": "SQL_ENTITY",
      "description": "Allows matching of strings based on comparison with a pattern. Unlike the LIKE function, string matching is case-insensitive.  LIKE, ILIKE, and RLIKE all perform similar operations; however, RLIKE uses POSIX EXE (Extended Regular Expression) syntax instead of the SQL pattern syntax used by LIKE and ILIKE.",
      "content": "<subject> ILIKE <pattern> [ ESCAPE <escape> ]\r\n\r\nILIKE( <subject> , <pattern> [ , <escape> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Conversion/Casting/AS_<object_type>/AS_BINARY",
      "id": "f161d12d-6a92-4eec-920d-225fb45896d0",
      "parent_folder_id": "48876c3a-68ff-4922-afd0-99dfaa4624cd",
      "name": "AS_BINARY",
      "entity_type": "SQL_ENTITY",
      "description": "Casts a VARIANT value to a binary string.",
      "content": "AS_BINARY( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/General Aggregation/COVAR_SAMP",
      "id": "f1d35233-5899-4210-8cd0-d58c5e44acdc",
      "parent_folder_id": "03075605-73d6-4e24-98c9-c1ae2917d1ff",
      "name": "COVAR_SAMP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sample covariance for non-null pairs in a group. It is computed for non-null pairs using the following formula:  (SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / (COUNT(*) - 1)  Where x is the independent variable and y is the dependent variable.",
      "content": "COVAR_SAMP( y , x )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Type Predicates/IS_<object_type>/IS_ARRAY",
      "id": "f215b39a-8a4e-4c1c-b12c-bf51ca02963a",
      "parent_folder_id": "d57aac71-2f6f-4994-88ba-95be21d9f5f1",
      "name": "IS_ARRAY",
      "entity_type": "SQL_ENTITY",
      "description": "Returns TRUE if its VARIANT argument contains an ARRAY value.",
      "content": "IS_ARRAY( <variant_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Bitwise Expression Functions/BITNOT",
      "id": "f2ece21b-ec6c-47ca-a2b3-caca45a44ca1",
      "parent_folder_id": "21b07106-8121-442f-a8f4-58f90665d54d",
      "name": "BITNOT",
      "entity_type": "SQL_ENTITY",
      "description": "Bitwise negation of a numeric expression.",
      "content": "BITNOT(a)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Semi-structured Data Functions/Extraction",
      "id": "f3987910-66c2-49ad-a80f-63146c591214",
      "parent_folder_id": "ee86e399-6f11-4483-bdee-33b498a53753",
      "name": "Extraction",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/PERCENTILE_CONT",
      "id": "f4ae2d7c-ac4f-4c11-89d8-e57a07983de9",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "PERCENTILE_CONT",
      "entity_type": "SQL_ENTITY",
      "description": "Return a percentile value based on a continuous distribution of the input column (specified in order_by_expr). If no input row lies exactly at the desired percentile, the result is calculated using linear interpolation of the two nearest input values. NULL values are ignored in the calculation.",
      "content": "PERCENTILE_CONT( <percentile> ) WITHIN GROUP (ORDER BY <order_by_expr>) OVER ( [ PARTITION BY <expr3> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions/Hash",
      "id": "f4c66af5-134a-4d31-998e-25aaf0a3ffab",
      "parent_folder_id": "fcfe29fe-a075-43ce-a750-5f0158cf6e1d",
      "name": "Hash",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/General Manipulation/PARSE_URL",
      "id": "f4e48d5d-1a81-4451-9eb6-027fcc50ef06",
      "parent_folder_id": "8377f3b1-c20e-4e05-ac82-ac7a7353a292",
      "name": "PARSE_URL",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a JSON object consisting of all the components (fragment, host, path, port, query, scheme) in a valid input URL/URI.",
      "content": "PARSE_URL(<string>, [<permissive>])",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Addition/Subtraction/DATEDIFF",
      "id": "f51cb165-e963-4c5f-ad1e-c04de092526f",
      "parent_folder_id": "8054e425-6b8c-49a9-a2de-46df896295d8",
      "name": "DATEDIFF",
      "entity_type": "SQL_ENTITY",
      "description": "Calculates the difference between two date, time, or timestamp expressions based on the date or time part requested. The function returns the result of subtracting the second argument from the third argument.  The minus sign (“-“) can also be used to subtract dates.",
      "content": "Syntax for DATEDIFF\r\n\r\nDATEDIFF( <date_or_time_part>, <date_or_time_expr1>, <date_or_time_expr2> )\r\nSyntax for minus sign\r\n\r\n<date_or_time_expr2> - <date_or_time_expr1>",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/BOOLXOR",
      "id": "f5974d28-9e97-43d1-bd2e-ee33ec7de0f1",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "BOOLXOR",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the Boolean XOR of two numeric expressions (i.e. one of the expressions, but not both expressions, is TRUE). In accordance with Boolean semantics:  Non-zero values (including negative numbers) are regarded as True.  Zero values are regarded as False.",
      "content": "BOOLXOR( expr1 , expr2 )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Rounding and Truncation/MOD",
      "id": "f5caff2d-0977-41a1-acfb-84eb43212331",
      "parent_folder_id": "c92cfc54-280e-4dc8-82f8-6599224e4332",
      "name": "MOD",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the remainder of input expr1 divided by input expr2.  Equivalent to the modulo arithmetic operator (e.g. expr1 % expr2).",
      "content": "MOD( <expr1> , <expr2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Collation/COLLATE",
      "id": "f6fdfb0d-710d-46c2-8d68-2e0501cbd7c5",
      "parent_folder_id": "6404aec8-7c86-44ee-b074-f016b818db1e",
      "name": "COLLATE",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a copy of the original string, but with the specified collation_specification property instead of the original collation_specification property.  This copy can be used in subsequent string comparisons, which will use the new collation_specification.",
      "content": "The COLLATE function can be called as a normal function:\r\n\r\nCOLLATE(<string_expression>, '<collation_specification>')\r\nThe COLLATE function can be used as though it were an INFIX operator:\r\n\r\n<string_expression> COLLATE '<collation_specification>'",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conditional Expression Functions/[ NOT ] IN",
      "id": "f7142f93-e760-48a7-9521-b4b991f44055",
      "parent_folder_id": "5e921623-5bcc-4b23-82c9-16ed3799baeb",
      "name": "[ NOT ] IN",
      "entity_type": "SQL_ENTITY",
      "description": "Tests whether its argument is or is not one of the members of an explicit list or the result of a subquery.",
      "content": "<value> [ NOT ] IN ( <value1> , <value2> , ... )\r\n\r\n<value> [ NOT ] IN ( ( <value1> , <value2> , ... ) , ( <value3> , <value4> , ... ) )\r\n\r\n<value> [ NOT ] IN ( <subquery> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Numeric Functions/Trigonometric/COT",
      "id": "f726ab9f-9173-477e-b81e-c183d7b3e099",
      "parent_folder_id": "9e118df8-f5a0-4d29-81c9-e33796b262a9",
      "name": "COT",
      "entity_type": "SQL_ENTITY",
      "description": "Computes the cotangent of its argument; the argument should be expressed in radians.",
      "content": "COT( <real_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Data Generation Functions",
      "id": "f77ad3ce-991f-4aa3-99da-0cfcf4cde9b1",
      "parent_folder_id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "name": "Data Generation Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Conversion Functions",
      "id": "f7d813f4-6491-48b4-a1a8-105b410e1a51",
      "parent_folder_id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "name": "Conversion Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/REPLICATION_USAGE_HISTORY",
      "id": "f8255002-da66-425b-82c5-9f394916ec97",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "REPLICATION_USAGE_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "This table function can be used to query the replication history for a specified database within a specified date range. The information returned by the function includes the database name, credits consumed and bytes transferred for replication.",
      "content": "REPLICATION_USAGE_HISTORY(\r\n  [ DATE_RANGE_START => <constant_expr> ]\r\n  [ , DATE_RANGE_END => <constant_expr> ]\r\n  [ , DATABASE_NAME => '<string>' ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Bitwise Expression Functions/BITSHIFTLEFT",
      "id": "fa40c7c4-53ef-4b3d-86a4-0af0d3dfbfeb",
      "parent_folder_id": "21b07106-8121-442f-a8f4-58f90665d54d",
      "name": "BITSHIFTLEFT",
      "entity_type": "SQL_ENTITY",
      "description": "Shift the bits for a numeric expression n positions to the left.",
      "content": "BITSHIFTLEFT(a, n)",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/MATERIALIZED_VIEW_REFRESH_HISTORY",
      "id": "faaa91cc-456e-4d32-a8f1-ebbd4d19a0e3",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "MATERIALIZED_VIEW_REFRESH_HISTORY",
      "entity_type": "SQL_ENTITY",
      "description": "This table function is used for querying the materialized views refresh history for a specified materialized view within a specified date range. The information returned by the function includes the view name and credits consumed each time a materialized view is refreshed.",
      "content": "MATERIALIZED_VIEW_REFRESH_HISTORY(\r\n      [ DATE_RANGE_START => <constant_expr> ]\r\n      [ , DATE_RANGE_END => <constant_expr> ]\r\n      [ , MATERIALIZED_VIEW_NAME => '<string>' ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Window Functions/General Window/STDDEV_SAMP",
      "id": "fae2f45b-f8b7-499e-9d9d-d9395c4d6b0e",
      "parent_folder_id": "9bd2c303-17b7-42b9-9b24-a718402f7cd9",
      "name": "STDDEV_SAMP",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the sample standard deviation (square root of sample variance) of non-NULL values. If all records inside a group are NULL, returns NULL.",
      "content": "STDDEV_SAMP( <expr1> ) OVER (\r\n                            [ PARTITION BY <expr2> ]\r\n                            [ ORDER BY <expr3> [ ASC | DESC ] [ <window_frame> ] ]\r\n                            )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Addition/Subtraction/ADD_MONTHS",
      "id": "fc063318-2203-42c2-8ed2-b29b6614a9ef",
      "parent_folder_id": "8054e425-6b8c-49a9-a2de-46df896295d8",
      "name": "ADD_MONTHS",
      "entity_type": "SQL_ENTITY",
      "description": "Adds or subtracts a specified number of months to a date or timestamp, preserving the end-of-month information.",
      "content": "ADD_MONTHS( <date_or_timestamp_expr> , <num_months_expr> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Encoding & Decoding",
      "id": "fc4f363e-00a4-4fc8-bc33-839c887fa6d8",
      "parent_folder_id": "eb0a11a4-3341-43fe-af67-874f77b81187",
      "name": "Encoding & Decoding",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Date & Time Functions/Addition/Subtraction/TIMESTAMPDIFF",
      "id": "fc8001bc-ede8-4d51-bc71-bf9c8dccde44",
      "parent_folder_id": "8054e425-6b8c-49a9-a2de-46df896295d8",
      "name": "TIMESTAMPDIFF",
      "entity_type": "SQL_ENTITY",
      "description": "Calculates the difference between two date, time, or timestamp expressions based on the specified date or time part.  Alternative for DATEDIFF.",
      "content": "TIMESTAMPDIFF( <date_or_time_part> , <date_or_time_expr1> , <date_or_time_expr2> )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Aggregate Functions",
      "id": "fcfe29fe-a075-43ce-a750-5f0158cf6e1d",
      "parent_folder_id": "167baff3-05d8-438b-a59a-ca45d168ce60",
      "name": "Aggregate Functions",
      "entity_type": "FOLDER"
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/String & Binary Functions/Other Matching/Comparison/SUBSTR , SUBSTRING",
      "id": "fda2da2c-cf11-4650-acb0-35dd6283309b",
      "parent_folder_id": "27af683f-6057-4790-9b2a-a5242e0516e5",
      "name": "SUBSTR , SUBSTRING",
      "entity_type": "SQL_ENTITY",
      "description": "Returns the portion of the string or binary value from base_expr, starting from the character/byte specified by start_expr, with optionally limited length.  These functions are synonymous.",
      "content": "SUBSTR( <base_expr>, <start_expr> [ , <length_expr> ] )\r\n\r\nSUBSTRING( <base_expr>, <start_expr> [ , <length_expr> ] )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    },
    {
      "fqn": "/Community Queries/Snowflake/SQL Functions/Table Functions/GET_OBJECT_REFERENCES",
      "id": "ff56d319-3c55-4ebd-87ee-c01504c06dd6",
      "parent_folder_id": "8d9751e6-633a-48c8-bd11-7fbd296dce76",
      "name": "GET_OBJECT_REFERENCES",
      "entity_type": "SQL_ENTITY",
      "description": "Returns a list of objects that a specified object references. Input is currently limited to the name of a view.",
      "content": "GET_OBJECT_REFERENCES(\r\n  DATABASE_NAME => '<string>'\r\n  , SCHEMA_NAME => '<string>'\r\n  , OBJECT_NAME => '<string>' )",
      "type": "QUERY",
      "platform": "Snowflake",
      "executed_count": 0
    }
  ]
}
